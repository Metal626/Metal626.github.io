<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Metal626’s Notes</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-12-12T09:23:31.481Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Metal626</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Retrofit+Rxjava服务器IP轮询重试机制实现</title>
    <link href="http://yoursite.com/2016/12/12/Retrofit+Rxjava%E6%9C%8D%E5%8A%A1%E5%99%A8IP%E8%BD%AE%E8%AF%A2%E9%87%8D%E8%AF%95%E6%9C%BA%E5%88%B6%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2016/12/12/Retrofit+Rxjava服务器IP轮询重试机制实现/</id>
    <published>2016-12-12T07:44:48.601Z</published>
    <updated>2016-12-12T09:23:31.481Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>为了保证客户端稳定性和网络容错性，提升用户体验，在客户端建立服务端IP轮询及重试机制是十分有必要的，本文为我个人经验总结，希望对你能有参考价值。</p>
</blockquote>
<p>app在启动时会请求一些配置信息，其中就包括ip的路由表，将这份路由表存储到本地，至于是sp还是对象持久化抑或是其他方式，可根据实际情况自行选择。</p>
<p>因为项目网络层由Retrofit+Rxjava+Okhttp实现，Retrofit运行时无法改变baseUrl,即使可以通过反射的方式来改变baseUrl，也无法对已经生成的service对象起作用，而且我的项目中所有service对象都通过Dagger2注入，所以最终使用了这样一种方式。</p>
<p>url交给UrlManager来管理<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UrlManager</span> </span>&#123;</div><div class="line">   </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] HOST_SITE = &#123;<span class="string">"https://xxx/api/"</span>,xxx&#125;;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] HOST_WEB = &#123;<span class="string">"https://xxx/"</span>,xxx&#125;;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String HOST_SITE_DEBUG = <span class="string">"https://xxx/api/"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String HOST_WEB_DEBUG = <span class="string">"https://xxx/"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; list;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Random random = <span class="keyword">new</span> Random();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getHostSite</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (BuildConfig.IS_DEBUG) &#123;</div><div class="line">            <span class="keyword">return</span> processUrl(HOST_SITE_DEBUG);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            String host = getDynamicHost();</div><div class="line">            <span class="keyword">if</span> (!TextUtils.isEmpty(host)) <span class="keyword">return</span> host;</div><div class="line">            <span class="keyword">return</span> HOST_SITE[random.nextInt(HOST_SITE.length)];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getDynamicHost</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> index = (<span class="keyword">int</span>) SPUtils.get(NeutronApplication.getContext(), Constants.URL, <span class="number">0</span>);</div><div class="line">        <span class="keyword">if</span> (list != <span class="keyword">null</span> &amp;&amp; list.size() &gt; <span class="number">0</span> &amp;&amp; index &lt; list.size())</div><div class="line">            <span class="keyword">return</span> list.get(index);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getHostWeb</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (BuildConfig.IS_DEBUG) &#123;</div><div class="line">            <span class="keyword">return</span> processUrl(HOST_WEB_DEBUG);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            String host = getDynamicHost();</div><div class="line">            <span class="keyword">if</span> (!TextUtils.isEmpty(host)) <span class="keyword">return</span> host;</div><div class="line">            <span class="keyword">return</span> HOST_WEB[random.nextInt(HOST_WEB.length)];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setHosts</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</div><div class="line">        UrlManager.list = list;</div><div class="line">        RxHelper.setCounterAttempts(list.size());</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">updateUrlIndex</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (list != <span class="keyword">null</span> &amp;&amp; i &gt;= list.size())</div><div class="line">            i = <span class="number">0</span>;</div><div class="line">        SPUtils.put(NeutronApplication.getContext(), Constants.URL, i);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">updateUrlIndex</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> o = (<span class="keyword">int</span>) SPUtils.get(NeutronApplication.getContext(), Constants.URL, <span class="number">0</span>);</div><div class="line">        updateUrlIndex(o + <span class="number">1</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>app启动时拉取到配置后设置UrlManager中的路由表，然后每次根据索引去路由表动态拿请求地址，那路由索引由谁来控制呢？<br>因为我将项目中的rxjava抽取了一层RxHelper,所以这件事就交给RxHelper来干了，可以覆盖所有的网络请求。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RxHelper</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COUNTER_START = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> COUNTER_ATTEMPTS = <span class="number">3</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setCounterAttempts</span><span class="params">(<span class="keyword">int</span> counterAttempts)</span> </span>&#123;</div><div class="line">        COUNTER_ATTEMPTS = counterAttempts;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; rx.Observable.<span class="function">Transformer&lt;T, T&gt; <span class="title">handleResult</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> tObservable -&gt; tObservable</div><div class="line">                .flatMap(RxHelper::createData)</div><div class="line">                .retryWhen(observable -&gt; observable.compose(zipWithFlatMap()))</div><div class="line">                .observeOn(AndroidSchedulers.mainThread())</div><div class="line">                .subscribeOn(Schedulers.io());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; rx.Observable.<span class="function">Transformer&lt;T, T&gt; <span class="title">handleResultWithOutRetryPolicy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> tObservable -&gt; tObservable.flatMap(RxHelper::createData)</div><div class="line">                .observeOn(AndroidSchedulers.mainThread())</div><div class="line">                .subscribeOn(Schedulers.io());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Observable.<span class="function">Transformer&lt;T, Long&gt; <span class="title">zipWithFlatMap</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> observable -&gt;</div><div class="line">                observable.zipWith(Observable.range(COUNTER_START, COUNTER_ATTEMPTS),</div><div class="line">                        (t, repeatAttempt) -&gt; repeatAttempt)</div><div class="line">                        .flatMap(<span class="keyword">new</span> Func1&lt;Integer, Observable&lt;Long&gt;&gt;() &#123;</div><div class="line">                            <span class="meta">@Override</span></div><div class="line">                            <span class="function"><span class="keyword">public</span> Observable&lt;Long&gt; <span class="title">call</span><span class="params">(Integer repeatAttempt)</span> </span>&#123;</div><div class="line">                                UrlManager.updateUrlIndex(repeatAttempt);</div><div class="line">                                <span class="keyword">return</span> Observable.timer(repeatAttempt * <span class="number">200</span>, TimeUnit.MILLISECONDS);</div><div class="line">                            &#125;</div><div class="line">                        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Observable&lt;T&gt; <span class="title">createData</span><span class="params">(<span class="keyword">final</span> T t)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;T&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> T&gt; subscriber)</span> </span>&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    subscriber.onNext(t);</div><div class="line">                    subscriber.onCompleted();</div><div class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                    LogUtils.logw(<span class="string">"Rxhelper: "</span> + e.toString());</div><div class="line">                    subscriber.onError(e);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样在每次请求错误时，会递增路由表索引，继续下次请求，轮询的间隔为<code>Observable.timer(repeatAttempt * 200, TimeUnit.MILLISECONDS);</code><br>对RxJava的retryWhen不理解的同学请移步<a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/0206/3953.html" target="_blank" rel="external">对RxJava中.repeatWhen()和.retryWhen()操作符的思考</a>。</p>
<p>之前也说了，retrofit不能修改baseUrl，反射的方式也不适合我的项目，至于利用builder生成新的retrofit对象的方式更不考虑了，那我是怎么实现运行时修改请求地址的呢？别忘了okhttp是可以添加拦截器的，在OkHttpIntercepter中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OkHttpInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="comment">//配置request</span></div><div class="line">        Request request = chain.request();</div><div class="line">        Request.Builder requestBuilder = request.newBuilder();</div><div class="line">        String url = UrlManager.getHostSite();</div><div class="line">        Uri parse = Uri.parse(url);</div><div class="line">        String host = parse.getHost();</div><div class="line">        HttpUrl httpUrl = request.url().newBuilder().host(host).build();</div><div class="line">        requestBuilder.url(httpUrl);</div><div class="line">        Response.Builder responseBuilder = chain.proceed(requestBuilder.build()).newBuilder();</div><div class="line">        Response response = responseBuilder.build();</div><div class="line">        <span class="keyword">return</span> response;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>拦截请求的url,修改其host，这样整个流程就ok了，http的各种错误码的处理也是可以在拦截器中统一处理的，至于其他健壮性的考虑此处就不做过多阐述了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;为了保证客户端稳定性和网络容错性，提升用户体验，在客户端建立服务端IP轮询及重试机制是十分有必要的，本文为我个人经验总结，希望对你能有参考价值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;app在启动时会请求一些配置信息，其中就包括ip的路由表，将
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="-rxjava -retrofit -ip轮询 -网络" scheme="http://yoursite.com/tags/rxjava-retrofit-ip%E8%BD%AE%E8%AF%A2-%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>android多渠道打包最快方案</title>
    <link href="http://yoursite.com/2016/12/12/android%E5%A4%9A%E6%B8%A0%E9%81%93%E6%89%93%E5%8C%85/"/>
    <id>http://yoursite.com/2016/12/12/android多渠道打包/</id>
    <published>2016-12-12T07:04:02.140Z</published>
    <updated>2016-12-12T07:33:07.962Z</updated>
    
    <content type="html"><![CDATA[<p>目前Android多渠道打包主要两种方式：</p>
<h4 id="Gradle方式。"><a href="#Gradle方式。" class="headerlink" title="Gradle方式。"></a>Gradle方式。</h4><p>   在build.gradle配置:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">productFlavors &#123;</div><div class="line">       huawei &#123;</div><div class="line">           manifestPlaceholders = [UMENG_CHANNEL_VALUE: <span class="string">"huawei"</span>]</div><div class="line">       &#125;</div><div class="line">       xiaomi &#123;</div><div class="line">           manifestPlaceholders = [UMENG_CHANNEL_VALUE: <span class="string">"xiaomi"</span>]</div><div class="line">       &#125;</div><div class="line">       ...</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>渠道多的时候会导致gradle文件很长，如果想简化书写可以这样做：<br>在build.gradle中配置如下：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Properties properties = <span class="keyword">new</span> Properties()</div><div class="line">properties.load(<span class="keyword">project</span>.rootProject.<span class="keyword">file</span>(<span class="string">'local.properties'</span>).newDataInputStream())</div><div class="line">...</div><div class="line">android&#123;</div><div class="line">    ...</div><div class="line">    productFlavors &#123;</div><div class="line">            <span class="keyword">def</span> channelArray = properties.getProperty(<span class="string">"channel"</span>).split(<span class="string">";"</span>);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; channelArray.<span class="keyword">size</span>(); i++) &#123;</div><div class="line">                <span class="keyword">def</span> channel = channelArray[i]</div><div class="line">                <span class="string">"$&#123;channel&#125;"</span> &#123;</div><div class="line">                    manifestPlaceholders = [CHANNEL_VALUE: channel]</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>local.properties中添加所有渠道号：<code>channel=wandoujia;_360;yingyongbao;xiaomi;baidu;huawei;...</code></p>
<p>当渠道很多的时候，每次打包的时间要几十分钟到几个小时，那么有没有更快速的方式呢，请看第二种方式。</p>
<h4 id="META-INF方式。"><a href="#META-INF方式。" class="headerlink" title="META-INF方式。"></a>META-INF方式。</h4><p>使用此种方式可以动态获取当前渠道号，极大节省了打包时间。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 友盟配置</div><div class="line"> 在application onCreate方法调用</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">umengConfig</span><span class="params">()</span> </span>&#123;</div><div class="line">    String channel = getChannelFromApk(application, <span class="string">"channel-"</span>);</div><div class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(channel)) &#123;</div><div class="line">        channel = <span class="string">"default"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (BuildConfig.IS_DEBUG) &#123;</div><div class="line">        Toast.makeText(application, <span class="string">"当前渠道:"</span> + channel, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">    AnalyticsConfig.setChannel(channel);</div><div class="line">&#125;</div><div class="line"></div><div class="line"> <span class="comment">/**</span></div><div class="line"> * 从apk中获取版本信息</div><div class="line"> * <span class="doctag">@param</span> context</div><div class="line"> * <span class="doctag">@param</span> channelPrefix 渠道前缀</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getChannelFromApk</span><span class="params">(Context context, String channelPrefix)</span> </span>&#123;</div><div class="line">    <span class="comment">//从apk包中获取</span></div><div class="line">    ApplicationInfo appinfo = context.getApplicationInfo();</div><div class="line">    String sourceDir = appinfo.sourceDir;</div><div class="line">    <span class="comment">//默认放在meta-inf/里， 所以需要再拼接一下</span></div><div class="line">    String key = <span class="string">"META-INF/"</span> + channelPrefix;</div><div class="line">    String ret = <span class="string">""</span>;</div><div class="line">    ZipFile zipfile = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        zipfile = <span class="keyword">new</span> ZipFile(sourceDir);</div><div class="line">        Enumeration&lt;?&gt; entries = zipfile.entries();</div><div class="line">        <span class="keyword">while</span> (entries.hasMoreElements()) &#123;</div><div class="line">            ZipEntry entry = ((ZipEntry) entries.nextElement());</div><div class="line">            String entryName = entry.getName();</div><div class="line">            <span class="keyword">if</span> (entryName.startsWith(key)) &#123;</div><div class="line">                ret = entryName;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">if</span> (zipfile != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                zipfile.close();</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    String[] split = ret.split(channelPrefix);</div><div class="line">    String channel = <span class="string">""</span>;</div><div class="line">    <span class="keyword">if</span> (split != <span class="keyword">null</span> &amp;&amp; split.length &gt;= <span class="number">2</span>) &#123;</div><div class="line">        channel = ret.substring(key.length());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> channel;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>每次动态获取应用包下meta-inf文件夹中的渠道文件取得渠道号，那么meta-inf下的渠道文件如何添加呢?我们可以使用python脚本来做这件事。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/python</span></div><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="keyword">import</span> zipfile</div><div class="line"><span class="keyword">import</span> shutil</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> ConfigParser</div><div class="line"></div><div class="line"><span class="comment">#读取配置文件</span></div><div class="line">config = ConfigParser.ConfigParser()</div><div class="line">config.read(<span class="string">"channels-config.ini"</span>)</div><div class="line"><span class="comment">#apk路径</span></div><div class="line">apk_path = config.get(<span class="string">"Build-Config"</span>, <span class="string">"apk.path"</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">"src apk path="</span> + apk_path</div><div class="line"><span class="comment">#渠道识别前缀</span></div><div class="line">channel_prefix = config.get(<span class="string">"Build-Config"</span>, <span class="string">"channel.prefix"</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">"channel prefix="</span> + channel_prefix</div><div class="line"><span class="comment">#渠道列表</span></div><div class="line">channel_list = config.get(<span class="string">"Build-Config"</span>, <span class="string">"channel.list"</span>)</div><div class="line"><span class="keyword">print</span> <span class="string">"channel list="</span> + channel_list</div><div class="line"><span class="comment">#解析渠道，生成渠道数组</span></div><div class="line">channel_array = channel_list.split(<span class="string">','</span>)</div><div class="line"></div><div class="line"><span class="comment"># 空文件 便于写入此空文件到apk包中作为channel文件</span></div><div class="line">src_temp_file = <span class="string">'temp_.txt'</span></div><div class="line"><span class="comment"># 创建一个空文件（不存在则创建）</span></div><div class="line">f = open(src_temp_file, <span class="string">'w'</span>)</div><div class="line">f.close()</div><div class="line"></div><div class="line"></div><div class="line">src_apk = apk_path</div><div class="line"><span class="comment"># file name (with extension)</span></div><div class="line">src_apk_file_name = os.path.basename(src_apk)</div><div class="line"><span class="comment"># 分割文件名与后缀</span></div><div class="line">temp_list = os.path.splitext(src_apk_file_name)</div><div class="line"><span class="comment"># name without extension</span></div><div class="line">src_apk_name = temp_list[<span class="number">0</span>]</div><div class="line"><span class="comment"># 后缀名，包含.   例如: ".apk "</span></div><div class="line">src_apk_extension = temp_list[<span class="number">1</span>]</div><div class="line"></div><div class="line"><span class="comment"># 创建生成目录,与文件名相关</span></div><div class="line">output_dir = <span class="string">'apks_'</span> + src_apk_name + <span class="string">'/'</span></div><div class="line"><span class="comment"># 目录不存在则创建</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(output_dir):</div><div class="line">    os.mkdir(output_dir)</div><div class="line"></div><div class="line"><span class="comment"># 遍历渠道号并创建对应渠道号的apk文件</span></div><div class="line"><span class="keyword">for</span> line <span class="keyword">in</span> channel_array:</div><div class="line">    <span class="comment"># 获取当前渠道号，因为从渠道文件中获得带有\n,所有strip一下</span></div><div class="line">    target_channel = line.strip()</div><div class="line">    <span class="comment"># 拼接对应渠道号的apk</span></div><div class="line">    target_apk = output_dir + src_apk_name + <span class="string">"-"</span> + target_channel + src_apk_extension</div><div class="line">    <span class="comment"># 拷贝建立新apk</span></div><div class="line">    shutil.copy(src_apk,  target_apk)</div><div class="line">    <span class="comment"># zip获取新建立的apk文件</span></div><div class="line">    zipped = zipfile.ZipFile(target_apk, <span class="string">'a'</span>, zipfile.ZIP_DEFLATED)</div><div class="line"></div><div class="line">    <span class="comment"># 初始化渠道信息</span></div><div class="line">    target_channel_file = <span class="string">"META-INF/"</span> + channel_prefix + <span class="string">"&#123;channel&#125;"</span>.format(channel = target_channel)</div><div class="line">    <span class="comment"># 写入渠道信息</span></div><div class="line">    zipped.write(src_temp_file, target_channel_file)</div><div class="line">    <span class="comment"># 关闭zip流</span></div><div class="line">    zipped.close()</div><div class="line"></div><div class="line"><span class="comment">#删除临时文件</span></div><div class="line">os.remove(src_temp_file)</div></pre></td></tr></table></figure></p>
<p>channels-config.ini文件如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[Build-Config]</div><div class="line">apk.path = your apk path</div><div class="line">channel.prefix = channel-</div><div class="line">channel.list = baidu,xiaomi</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前Android多渠道打包主要两种方式：&lt;/p&gt;
&lt;h4 id=&quot;Gradle方式。&quot;&gt;&lt;a href=&quot;#Gradle方式。&quot; class=&quot;headerlink&quot; title=&quot;Gradle方式。&quot;&gt;&lt;/a&gt;Gradle方式。&lt;/h4&gt;&lt;p&gt;   在build.gra
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="-多渠道打包" scheme="http://yoursite.com/tags/%E5%A4%9A%E6%B8%A0%E9%81%93%E6%89%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>jenkins+gitlab+蒲公英实现android应用自动化打包分发</title>
    <link href="http://yoursite.com/2016/12/12/jenkins+gitlab+%E8%92%B2%E5%85%AC%E8%8B%B1%E5%AE%9E%E7%8E%B0android%E5%BA%94%E7%94%A8%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85%E5%88%86%E5%8F%91/"/>
    <id>http://yoursite.com/2016/12/12/jenkins+gitlab+蒲公英实现android应用自动化打包分发/</id>
    <published>2016-12-12T03:26:51.288Z</published>
    <updated>2016-12-12T06:37:47.055Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>作为一名高效的开发者，要尽量避免的重复劳动实现自动化的流程。搭建本地jenkins服务器，实现自动化打包流程，从此测试包交给测试人员自己去打就好了，集成蒲公英等分发平台，实现二维码或短链接下载，也为运营人员提供了便捷。</p>
</blockquote>
<h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>前往<a href="https://jenkins.io/" target="_blank" rel="external">https://jenkins.io/</a>下载对应系统版本的jenkins包，本文以windows为例，两种方式：</p>
<ol>
<li>下载windows对应的安装包，安装后jenkins作为windows服务占用本地8080端口;在浏览器输入<code>localhost:8080</code>即可访问。</li>
<li>下载tomcat服务器，然后下载jenkins war包，将其部署到tomcat webapps 目录下,启动tomcat后，在浏览器使用<code>localhost:8080/jenkins</code>访问。</li>
</ol>
<p>启动后，会看到jenkins初始配置页面，这里需要选择安装的插件，例如：我要集成gitlab，所以选择gitlab的插件，如果你是集成github，则选择github插件，大体流程相同，插件可以后期根据需要再安装。</p>
<p><img src="http://ohe81rx2w.bkt.clouddn.com/16-12-12/80636207-file_1481523650297_1148a.png" alt=""></p>
<p>进入主页后，点击系统管理-&gt;Global Tool Configuration，设置jdk、git及gradle等。</p>
<h3 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h3><p>新建自由风格的软件项目</p>
<p><img src="http://ohe81rx2w.bkt.clouddn.com/16-12-12/13268849-file_1481515797721_8498.png" alt=""></p>
<p>进入配置页面</p>
<p><img src="http://ohe81rx2w.bkt.clouddn.com/16-12-12/49682489-file_1481516027421_13068.png" alt=""></p>
<p>配置Gernal模块。选中参数化构建过程选项，配置如下：</p>
<p><img src="http://ohe81rx2w.bkt.clouddn.com/16-12-12/50399692-file_1481516484754_87d.png" alt=""></p>
<p>配置源码管理。设置远程仓库的地址，http方式和ssh方式都是支持的。</p>
<p><img src="http://ohe81rx2w.bkt.clouddn.com/16-12-12/31227347-file_1481516862467_9231.png" alt=""><br><strong>ps:</strong>如果没有git选项，可能git环境设置不成功，请去首页-系统管理-Global Tool Configuration页，设置jdk、git及gradle等。</p>
<p>构建触发器。这里有两个选项：</p>
<ol>
<li><p>Poll SCM：定时检查源码变更（根据SCM软件的版本号），如果有更新就checkout最新code下来，然后执行构建动作。我的配置如下：<br><em>/5 </em> <em> </em> *  （每5分钟检查一次源码变化）</p>
</li>
<li><p>Build periodically：周期进行项目构建（它不care源码是否发生变化），我的配置如下：<br>0 2 <em> </em> *  （每天2:00 必须build一次源码）<br>这里只是向大家说明，本案例因为android每次按照版本及渠道发包，所以不做配置。</p>
</li>
</ol>
<p>构建模块配置</p>
<p><img src="http://ohe81rx2w.bkt.clouddn.com/16-12-12/27064469-file_1481520970804_6f71.png" alt=""><br>选择项目所使用gradle版本，gradle任务：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">-PIS_JENKINS=$&#123;IS_JENKINS&#125; -PAPP_VERSION=$&#123;APP_VERSION&#125; -PJENKINS_TIME=$&#123;JENKINS_TIME&#125;</div><div class="line">assemble$&#123;PRODUCT_FLAVOR_BUILD&#125;$&#123;ENVIRONMENT&#125;</div><div class="line">--stacktrace</div><div class="line">--debug</div><div class="line">--info</div></pre></td></tr></table></figure></p>
<p>集成到蒲公英。点击增加构建后步骤，windows选择execute Windows batch command,添加命令：<br><code>curl -k -F &quot;file=@D:\env\android-v%APP_VERSION%-%PRODUCT_FLAVOR_BUILD%-%JENKINS_TIME%-%ENVIRONMENT%.apk&quot; -F &quot;uKey=your ukey&quot; -F &quot;_api_key=your api key&quot; https://www.pgyer.com/apiv1/app/upload</code><br>这里的u key和api key是你在蒲公英平台注册开发者获得。文件的地址要跟你在项目build.gradle中配置的一样。</p>
<p>项目build.gradle配置如下：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">android&#123;</div><div class="line">...</div><div class="line">    defaultConfig &#123;</div><div class="line">    ...</div><div class="line">        versionName APP_VERSION</div><div class="line">        resValue(<span class="string">"string"</span>, <span class="string">'app_version'</span>, APP_VERSION)</div><div class="line">        manifestPlaceholders = [UMENG_CHANNEL_VALUE: <span class="string">"common"</span>]</div><div class="line">    ...    </div><div class="line">    &#125;</div><div class="line">     productFlavors &#123;</div><div class="line">        huawei &#123;</div><div class="line">            manifestPlaceholders = [UMENG_CHANNEL_VALUE: <span class="string">"huawei"</span>]</div><div class="line">        &#125;</div><div class="line">        xiaomi &#123;</div><div class="line">            manifestPlaceholders = [UMENG_CHANNEL_VALUE: <span class="string">"xiaomi"</span>]</div><div class="line">        &#125;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//修改生成的apk名字及输出目录</span></div><div class="line">     applicationVariants.all &#123; variant -&gt;</div><div class="line">        variant.outputs.<span class="keyword">each</span> &#123; output -&gt;</div><div class="line">            <span class="keyword">def</span> newName</div><div class="line">            <span class="keyword">def</span> timeNow</div><div class="line">            <span class="keyword">def</span> oldFile = output.outputFile</div><div class="line">            <span class="keyword">def</span> outDirectory = oldFile.parent</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (IS_JENKINS) &#123;</div><div class="line">                timeNow = JENKINS_TIME</div><div class="line">                outDirectory = <span class="string">'D:/env'</span></div><div class="line">                newName = <span class="string">'android-v'</span> +</div><div class="line">                        APP_VERSION + <span class="string">'-'</span> + variant.productFlavors[<span class="number">0</span>].name + <span class="string">'-'</span>+ timeNow + <span class="string">'-'</span> + variant.buildType.name + <span class="string">'.apk'</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                timeNow = getDate()</div><div class="line">                <span class="keyword">if</span> (variant.buildType.name.equals(<span class="string">'debug'</span>)) &#123;</div><div class="line">                    newName = <span class="string">"android-v$&#123;APP_VERSION&#125;-debug.apk"</span></div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    newName = <span class="string">'android-v'</span> +</div><div class="line">                            APP_VERSION + <span class="string">'-'</span> + variant.productFlavors[<span class="number">0</span>].name + <span class="string">'-'</span>+timeNow + <span class="string">'-'</span> + variant.buildType.name + <span class="string">'.apk'</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            output.outputFile = <span class="keyword">new</span> <span class="keyword">File</span>(outDirectory, newName)</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="开始构建任务"><a href="#开始构建任务" class="headerlink" title="开始构建任务"></a>开始构建任务</h3><p>配置完参数，保存后回到主页，点击项目后的run图标选择各项动态参数，开始任务。</p>
<p><img src="http://ohe81rx2w.bkt.clouddn.com/16-12-12/4088147-file_1481522181446_bd3c.png" alt=""></p>
<p><img src="http://ohe81rx2w.bkt.clouddn.com/16-12-12/79583275-file_1481521944640_12019.png" alt=""></p>
<p>点击构建历史中当前条目，进入Console Output，可查看此次构建任务的log信息。如果构建失败，请去查看log信息，根据错误信息纠错。</p>
<p><strong>notice:</strong> 项目gradle.properties也要添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">APP_VERSION=2.4.0</div><div class="line">IS_JENKINS=false</div><div class="line">JENKINS_TIME=&apos;&apos;</div></pre></td></tr></table></figure></p>
<p>服务器上的sdk也要跟本地保持一致。</p>
<p>jenkins最近推出了blue ocean项目，提供了更好的用户体验，具体细节在<a href="https://jenkins.io/projects/blueocean/" target="_blank" rel="external">https://jenkins.io/projects/blueocean/</a>，你也可以在可选插件里搜索BlueOcean beta,安装体验。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;作为一名高效的开发者，要尽量避免的重复劳动实现自动化的流程。搭建本地jenkins服务器，实现自动化打包流程，从此测试包交给测试人员自己去打就好了，集成蒲公英等分发平台，实现二维码或短链接下载，也为运营人员提供了便捷。&lt;/p&gt;
&lt;/blockquo
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="-jenkins -自动化打包" scheme="http://yoursite.com/tags/jenkins-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>依赖注入框架Dagger2系统性学习</title>
    <link href="http://yoursite.com/2016/11/29/dagger2%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91/"/>
    <id>http://yoursite.com/2016/11/29/dagger2文档翻译/</id>
    <published>2016-11-29T07:16:16.949Z</published>
    <updated>2016-12-12T07:41:36.745Z</updated>
    
    <content type="html"><![CDATA[<p><strong><span id="top">目录</span></strong></p>
<blockquote>
<p><a href="#home">Home</a><br><a href="#guide">User’s Guide</a><br><a href="#android">Android</a><br><a href="#multibindings">Multibinding Sets and Maps</a><br><a href="#subcomponent">Subcomponents</a><br><a href="#producers">Producers</a><br><a href="#testing">Testing</a><br><a href="#project">Project Pages</a>  </p>
</blockquote>
<p><a href="#bottom">到底部</a></p>
<h2 id="Home"><a href="#Home" class="headerlink" title="Home"></a><span id="home">Home</span></h2><p>Dagger是一个完全静态的编译时的Java和Android依赖注入矿建。它由<a href="http://square.github.io/" target="_blank" rel="external">Square</a>发布的早期版本改造而来现在由Google维护。</p>
<p>Dagger致力于解决开发中使用基于反射的的解决方案带来的性能问题。更多详情可以在<a href="https://docs.google.com/presentation/d/1fby5VeGU9CN8zjw4lAb2QPPsKRxx6mSwCe9q7ECNSJQ/pub?start=false&amp;loop=false&amp;delayms=3000&amp;slide=id.p" target="_blank" rel="external">这里</a>找到 by <a href="https://plus.google.com/+GregoryKick/posts" target="_blank" rel="external">+Gregory Kick</a>.</p>
<h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><ul>
<li><a href="http://google.github.io/dagger/users-guide" target="_blank" rel="external">User documentation</a></li>
<li><a href="http://google.github.io/dagger/api/latest/" target="_blank" rel="external">Dagger API @ HEAD</a></li>
</ul>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul>
<li><a href="https://github.com/google/dagger" target="_blank" rel="external">https://github.com/google/dagger</a></li>
</ul>
<h3 id="有问题？"><a href="#有问题？" class="headerlink" title="有问题？"></a>有问题？</h3><ul>
<li>在Stack Overflow <a href="http://stackoverflow.com/questions/tagged/dagger-2" target="_blank" rel="external">dagger-2</a>专题下提问</li>
<li>发送邮件到<a href="https://groups.google.com/forum/#!forum/dagger-discuss" target="_blank" rel="external">dagger-discuss@googlegroups.com</a></li>
</ul>
<h2 id="User’s-Guide"><a href="#User’s-Guide" class="headerlink" title="User’s Guide"></a><span id="guide">User’s Guide</span></h2><p>应用中好的类是那些做了事情实现了功能的类，例如：BarcodeDecoder、KoopaPhysicsEngine和AudioStreamer。这些类可能依赖了其他类，如：BarcodeCameraFinder、DefaultPhysicsEngine及HttpStreamer。</p>
<p>相比之下，应用中那些糟糕的类往往占用空间却没做什么事，例如：BarcodeDecoderFactory、CameraServiceLoader以及MutableContextWrapper，这些类就像胶带一样笨拙地将相关的东西捆在一起。</p>
<p>实现了<a href="https://en.wikipedia.org/wiki/Dependency_injection" target="_blank" rel="external">依赖注入</a>设计模式而且不需要书写模板的Dagger是这些工厂类的替代品。它可以让你专注于你感兴趣的类。声明依赖，然后指定怎么注入它们，然后发布你的应用。</p>
<p>构建基于标准<a href="http://docs.oracle.com/javaee/7/api/javax/inject/package-summary.html" target="_blank" rel="external">javax.inject</a>注解（<a href="https://jcp.org/en/jsr/detail?id=330" target="_blank" rel="external">JSR 330</a>），类的测试更容易。你不需要写一大堆样板文件只需要用FakeCreditCardService替换RpcCreditCardService即可。</p>
<p>依赖注入不仅仅应用于测试。它还便于创建通用的，可复用的模块。你可以在你所有的应用共享一个AuthenticationModule。你还可以在开发环境中运行DevLoggingModule，在生产环境中运行ProdLoggingModule以在不同情景下都能达到正确的行为。</p>
<h3 id="Dagger2的亮点"><a href="#Dagger2的亮点" class="headerlink" title="Dagger2的亮点 "></a><span id="jump">Dagger2的亮点 </span></h3><p>依赖注入的框架已经存在好多年了并且拥有多种多样的API来配置和注入。那为什么要重新造轮子呢？Dagger2是第一个使用生成的代码实现全栈的依赖注入框架。指导原则是模仿用户手写的代码来生成代码尽可能地保证依赖注入过程简单、可追踪、高性能。想了解更多关于这种设计的信息请观看<a href="https://www.youtube.com/watch?v=oK_XtfXPkqw&amp;feature=youtu.be" target="_blank" rel="external">视频</a>(<a href="https://docs.google.com/presentation/d/1fby5VeGU9CN8zjw4lAb2QPPsKRxx6mSwCe9q7ECNSJQ/pub?start=false&amp;loop=false&amp;delayms=3000&amp;slide=id.p" target="_blank" rel="external">幻灯片</a>) by <a href="https://plus.google.com/+GregoryKick/posts" target="_blank" rel="external">+Gregory Kick</a>。</p>
<h3 id="Using-Dagger"><a href="#Using-Dagger" class="headerlink" title="Using Dagger"></a>Using Dagger</h3><p>我们将通过建造一个咖啡机的过程来演示依赖注入和Dagger.可编译运行的完整样例代码请看Dagger的<a href="https://github.com/google/dagger/tree/master/examples/simple/src/main/java/coffee" target="_blank" rel="external">咖啡样例</a>。</p>
<h4 id="声明依赖"><a href="#声明依赖" class="headerlink" title="声明依赖"></a>声明依赖</h4><p>Dagger构建你的应用中的实例并满足他们的依赖。它使用<a href="http://docs.oracle.com/javaee/7/api/javax/inject/Inject.html" target="_blank" rel="external">javax.inject.Inject</a>注解来标识感兴趣的构造器和字段。</p>
<p>使用@Inject注解告诉Dagger创建类的实例应该用的构造器。当需要一个实例对象时，Dagger将会获得需要的参数并调用这个构造器。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thermosiphon</span> <span class="keyword">implements</span> <span class="title">Pump</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Heater heater;</div><div class="line"></div><div class="line">  <span class="meta">@Inject</span></div><div class="line">  Thermosiphon(Heater heater) &#123;</div><div class="line">    <span class="keyword">this</span>.heater = heater;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Dagger 可以直接注入字段（成员变量）。在这个例子中，它拿到Heater类实例对象和Pump类实例对象分别赋值给CoffeeMaker的heater字段和pump字段。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CoffeeMaker</span> </span>&#123;</div><div class="line"><span class="meta">@Inject</span> Heater heater;</div><div class="line"><span class="meta">@Inject</span> Pump pump;</div><div class="line"></div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果你的类有使用@Inject注解的字段但没有@Inject注解了的构造器与之对应，Dagger会注入这些字段但不会创建新的实例。添加一个带有@Inject注解的无参构造器来告诉Dagger可以创建对象。</p>
<p>Dagger也支持方法注入，但更推荐构造器注入和字段注入。</p>
<p>缺少@Inject注解的类是不能被Dagger构建的。</p>
<h4 id="实现依赖"><a href="#实现依赖" class="headerlink" title="实现依赖"></a>实现依赖</h4><p>默认情况下，Dagger会通过创建需要类型的实例来提供依赖。当你需要一个CoffeeMaker，它会通过new CoffeeMaker()来获得一个实例并赋值给需要注入的字段。</p>
<p>但@Inject不是哪都有效的：</p>
<ul>
<li>接口不能被创建（不支持接口注入）</li>
<li>第三方的类不能被注解（第三方类没有@Inject注解，除非可以改源码）</li>
<li>可配置的对象必须配置好（这个应该是泛型，本人在使用时发现注入是不支持泛型的）</li>
</ul>
<p>在上面这些场景下@Inject就有些尴尬了，使用@Provides注解方法来实现依赖。方法的返回类型与其要实现的依赖一致。<br>例如：只要需要Heater实例就会调用provideHeater()方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Provides</span> <span class="function"><span class="keyword">static</span> Heater <span class="title">provideHeater</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ElectricHeater();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>@Provides标注的方法可以依赖他们自己。任何时候当需要Pump对象时，下面这个方法返回一个Thermosiphon对象。<br>所有的@Provides注解的方法必须属于一个Module.这些类只是有@Module注解的类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DripCoffeeModule</span> </span>&#123;</div><div class="line">  <span class="meta">@Provides</span> <span class="function"><span class="keyword">static</span> Heater <span class="title">provideHeater</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ElectricHeater();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Provides</span> <span class="function"><span class="keyword">static</span> Pump <span class="title">providePump</span><span class="params">(Thermosiphon pump)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> pump;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>按照惯例，@Provides方法命名带provide前缀，module类命名带Module后缀。</p>
<h4 id="建立对象图"><a href="#建立对象图" class="headerlink" title="建立对象图"></a>建立对象图</h4><p>@Inject和@Provides注解的类通过他们的依赖关系联系起来形成对象图。调用代码就像一个应用的main方法或者Android应用通过一组明确定义的根集访问那个对象图。Dagger2中，那个集合是由一个包含返回需要类型且无参的方法的接口定义。通过<a href="http://google.github.io/dagger/api/latest/dagger/Component.html" target="_blank" rel="external">@Component</a>注解这个接口并传入<a href="http://google.github.io/dagger/api/latest/dagger/Module.html" target="_blank" rel="external">module</a>类型的参数，Dagger2然后根据这个协议生成所有实现。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(modules = DripCoffeeModule.class)</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CoffeeShop</span> </span>&#123;</div><div class="line">  <span class="function">CoffeeMaker <span class="title">maker</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>实现类的类名与接口的名字加上Dagger前缀相同。通过调用实现类的builder()方法可以获得<a href="https://en.wikipedia.org/wiki/Builder_pattern" target="_blank" rel="external">Builder</a>实例，通过这个实例可以设置依赖并build()得到一个新的实例。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">CoffeeShop coffeeShop = DaggerCoffeeShop.builder()</div><div class="line">   .dripCoffeeModule(<span class="keyword">new</span> DripCoffeeModule())</div><div class="line">   .build();</div></pre></td></tr></table></figure></p>
<p><em>Note:</em> 如果你的@Component不是顶层的类型，那生成的component的名字将会包含它的封闭类型的名字，通过下划线连接。例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line"> 		<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;</div><div class="line">   		<span class="meta">@Component</span></div><div class="line">   		<span class="class"><span class="keyword">interface</span> <span class="title">BazComponent</span> </span>&#123;&#125;</div><div class="line">  	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>将会生成名为DaggerFoo_ Bar_BazComponent的component.</p>
<p>任何有可达的默认构造器的module都可以被省略，如果没有设置builder会自动创建一个实例。而且任何@Provides方法都是静态的module,builder是不需要其实例的。如果不需要用户创建依赖实例就可以创建所有的依赖，那么生成的实现类将会包含一个create()方法，可以使用此方法得到一个实例而不用于builder打交道。</p>
<pre><code>CoffeeShop coffeeShop = DaggerCoffeeShop.create();
</code></pre><p>现在，我们的CoffeeApp可以方便的通过Dagger生成的实现来得到一个完全注入的CoffeeMaker.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeApp</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    CoffeeShop coffeeShop = DaggerCoffeeShop.create();</div><div class="line">    coffeeShop.maker().brew();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在图已经建立了入口也已经注入了，我们开启我们的咖啡机应用。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ java -cp ... coffee.CoffeeApp</div><div class="line">~ ~ ~ heating ~ ~ ~</div><div class="line">=&gt; =&gt; pumping =&gt; =&gt;</div><div class="line">[_]P coffee! [_]P</div></pre></td></tr></table></figure></p>
<p><strong>对象图中的绑定</strong></p>
<p>上面的例子展现如何构建一个拥有一些典型绑定的component，但还有不同的机制来为图贡献绑定。作为依赖下面这些是可用的而且可以用来生成更好的component.</p>
<ul>
<li>这些@Module中由@Provides声明的方法可以直接被@Component.modules或@Module.includes引用</li>
<li>任何类型的@Inject注解的构造器可以没有作用域也可以有与某个Component作用域一致的@Scope注解</li>
<li><a href="http://google.github.io/dagger/api/latest/dagger/Component.html#provision-methods" target="_blank" rel="external">component依赖</a>的<a href="http://google.github.io/dagger/api/latest/dagger/Component.html#dependencies(" target="_blank" rel="external">component提供方法</a>)</li>
<li>component自己</li>
<li>任何包含的<a href="http://google.github.io/dagger/api/latest/dagger/Subcomponent.html" target="_blank" rel="external">subcomponent</a>的不合格的<a href="http://google.github.io/dagger/api/latest/dagger/Subcomponent.Builder.html" target="_blank" rel="external">builders</a></li>
<li>上面所有绑定的Provider和Lazy 包装器。</li>
<li>上面绑定的懒加载的供应器（e.g Provider<lazy<coffeemaker>&gt;）</lazy<coffeemaker></li>
<li>任何类型的MemberInjector</li>
</ul>
<h4 id="单例和域绑定"><a href="#单例和域绑定" class="headerlink" title="单例和域绑定"></a>单例和域绑定</h4><p>用<a href="http://docs.oracle.com/javaee/7/api/javax/inject/Singleton.html" target="_blank" rel="external">@Singleton</a>注解@Provide方法或可注入的类，对象图将会在应用中使用同一个一个实例。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Provides</span> <span class="meta">@Singleton</span> <span class="function"><span class="keyword">static</span> Heater <span class="title">provideHeater</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> ElectricHeater();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可注入的类上的@Singleton注解也可以作为<a href="http://docs.oracle.com/javase/7/docs/api/java/lang/annotation/Documented.html" target="_blank" rel="external">文档</a>。它告诉潜在的维护者这个类可能被多个线程共享。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Singleton</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CoffeeMaker</span> </span>&#123;</div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>因为Dagger2会将图中添加了作用域的实例和component实现类的实例联系起来，所以这些component需要声明作用域。例如：在同一个component中使用@Singleton和@RequestScoped是没有意义的，因为他们具有不同的生命周期。想要声明一个具有作用域的component，只需要在该接口添加域注解。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(modules = DripCoffeeModule.class)</div><div class="line"><span class="meta">@Singleton</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CoffeeShop</span> </span>&#123;</div><div class="line">  <span class="function">CoffeeMaker <span class="title">maker</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Components可以有多种域注解。表明这些注解是同一个域的别名，这样component就可以包含它声明的域的所有绑定了。</p>
<h4 id="可重用的scope"><a href="#可重用的scope" class="headerlink" title="可重用的scope"></a>可重用的scope</h4><p>有时你可能想限制@Inject注解的构造器初始化的次数或者@Provides方法被调用的次数，但并不需要保证单例。这在内存比较吃紧的环境比如Android下会很有用。</p>
<p>当你使用<a href="http://google.github.io/dagger/api/latest/dagger/Reusable.html" target="_blank" rel="external">@Resuable</a>注解，这些@Resuable域绑定不像其他的域，不会和任何component联系，相反，每个使用这个绑定component会将返回值或初始化的对象缓存起来。</p>
<p>这意味着如果你在component中装载了@Resuable绑定的module,但只有一个子component使用了，那么那个子component将会缓存此绑定的对象。如果两个子component都使用了这个绑定但他们不继承同一个component，那么这两个子component的缓存是独立的。如果component已经缓存了对象，其子component会重用该对象。</p>
<p>并不能保证component只会调用该绑定一次，所以在返回可变对象或者需要使用单例的绑定上使用@Resuable是很危险的。对不关心被分配多少次的不变对象使用@Resuable是安全的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Reusable</span> <span class="comment">// 我们用了多少scopers并不重要，但不要浪费他们。</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CoffeeScooper</span> </span>&#123;</div><div class="line">  <span class="meta">@Inject</span> CoffeeScooper() &#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CashRegisterModule</span> </span>&#123;</div><div class="line">  <span class="meta">@Provides</span></div><div class="line">  <span class="meta">@Reusable</span> <span class="comment">// 不要这样做！你是关注你保存cash的register的</span></div><div class="line">            <span class="comment">// Use a specific scope instead.</span></div><div class="line">  <span class="function"><span class="keyword">static</span> CashRegister <span class="title">badIdeaCashRegister</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CashRegister();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">  </div><div class="line"><span class="meta">@Reusable</span> <span class="comment">// 不要这样做！ 你实际想每次都拿到新的filter对象，所以这里不需要使用域。</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CoffeeFilter</span> </span>&#123;</div><div class="line">  <span class="meta">@Inject</span> CoffeeFilter() &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="延迟注入"><a href="#延迟注入" class="headerlink" title="延迟注入"></a>延迟注入</h4><p>有时你需要延迟初始化对象。对于任意绑定T，你可以创建<a href="http://google.github.io/dagger/api/latest/dagger/Lazy.html" target="_blank" rel="external">Lazy<t></t></a>，这样就可以延迟对象初始化直到调用Lazy<t>的get()方法。如果T是单例的，那么在对象图中所有的注入都是同一个Lazy<t>实例。否则每个注入拿到的都是自己的Lazy<t>实例。对同一个Lazy<t>实例连续调用get()方法返回的都是一个T对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GridingCoffeeMaker</span> </span>&#123;</div><div class="line">  <span class="meta">@Inject</span> Lazy&lt;Grinder&gt; lazyGrinder;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">brew</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span> (needsGrinding()) &#123;</div><div class="line">      <span class="comment">//第一次调用get()时会创建Grinder对象并缓存起来</span></div><div class="line">      lazyGrinder.get().grind();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></t></t></t></t></p>
<h4 id="Provider注入"><a href="#Provider注入" class="headerlink" title="Provider注入"></a>Provider注入</h4><p>有时你需要返回多个实例而不是注入单个值。你有多种选择（Factories,Builders,等等）,其中一种选择就是注入一个Provider<t>而不是T。每次调用get()方法时Provider<t>会调用绑定逻辑。如果那个绑定逻辑是@Inject注解的构造器，会创建一个新对象，但一个@Provides方法是无法保证这点的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BigCoffeeMaker</span> </span>&#123;</div><div class="line">  <span class="meta">@Inject</span> Provider&lt;Filter&gt; filterProvider;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">brew</span><span class="params">(<span class="keyword">int</span> numberOfPots)</span> </span>&#123;</div><div class="line">  ...</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; numberOfPots; p++) &#123;</div><div class="line">      maker.addFilter(filterProvider.get()); <span class="comment">//每次都是新的filter对象	      </span></div><div class="line">      maker.addCoffee(...);</div><div class="line">      maker.percolate();</div><div class="line">      ...</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></t></t></p>
<p><em>Note:</em> 注入Provider<t>可能降低代码的可读性。通常你会用一个<a href="https://en.wikipedia.org/wiki/Factory_(object-oriented_programming" target="_blank" rel="external">factory</a>)或一个Lazy<t>或是重新组织代码的结构和生命周期来注入一个T。但注入Provider<t>有些情况可以救命。一个通常的使用场景就是当你必须使用一个遗留的并不与你的对象的自然生命周期一样的架构时。（例如：按照设计servlets是单例的，但只有在明确请求数据的上下文中中是有效的）。</t></t></t></p>
<h4 id="Qualifiers"><a href="#Qualifiers" class="headerlink" title="Qualifiers"></a>Qualifiers</h4><p>有时类型不足以区分依赖。例如：一个复杂的咖啡机想要将睡和盘子的加热器分开。</p>
<p>这种情况，我们添加一个<strong>qualifier annotation</strong>。这是任何本身有<a href="http://docs.oracle.com/javaee/7/api/javax/inject/Qualifier.html" target="_blank" rel="external">@Qualifier</a>注解的注解。下面是<a href="http://docs.oracle.com/javaee/7/api/javax/inject/Named.html" target="_blank" rel="external">@Named</a>的声明，它是javax.inject中的注解。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Qualifier</span></div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Retention</span>(RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Named &#123;</div><div class="line">  <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>你可以创建自定义的qualifier注解，或使用@Named.在关心的字段或参数上使用qualifiers.类型+qualifier将会用来标识一个依赖。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExpensiveCoffeeMaker</span> </span>&#123;</div><div class="line">  <span class="meta">@Inject</span> <span class="meta">@Named</span>(<span class="string">"water"</span>) Heater waterHeater;</div><div class="line">  <span class="meta">@Inject</span> <span class="meta">@Named</span>(<span class="string">"hot plate"</span>) Heater hotPlateHeater;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注解对应的@Provides方法来提供限定的值。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Provides</span> <span class="meta">@Named</span>(<span class="string">"hot plate"</span>) <span class="function"><span class="keyword">static</span> Heater <span class="title">provideHotPlateHeater</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ElectricHeater(<span class="number">70</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Provides</span> <span class="meta">@Named</span>(<span class="string">"water"</span>) <span class="function"><span class="keyword">static</span> Heater <span class="title">provideWaterHeater</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ElectricHeater(<span class="number">93</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>依赖可以有多个qualifier注解。</p>
<h4 id="编译期校验"><a href="#编译期校验" class="headerlink" title="编译期校验"></a>编译期校验</h4><p>Dagger的注解处理器会生成名如CoffeeMaker_Factory.java或CoffeeMaker_MembersInjector.java的源文件。这些文件就是Dagger的实现细节。你不需要直接使用它们，虽然通过注解单步调试时会很方便。唯一需要你关心的是那些带有Dagger前缀的为component生成的代码。</p>
<h3 id="Using-Dagger-In-Your-Build"><a href="#Using-Dagger-In-Your-Build" class="headerlink" title="Using Dagger In Your Build"></a>Using Dagger In Your Build</h3><h4 id="Gradle-Users"><a href="#Gradle-Users" class="headerlink" title="Gradle Users"></a>Gradle Users</h4><p>你需要引入运行时依赖dagger-2.2.jar，为了激活代码生成还要引入编译期依赖dagger-compiler-2.2.jar.</p>
<p>Maven工程在pom.xml如下配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.dagger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dagger<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.dagger<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dagger-compiler<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>Android Gradle</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Add plugin https://bitbucket.org/hvisser/android-apt</span></div><div class="line">buildscript &#123;</div><div class="line">  repositories &#123;</div><div class="line">    mavenCentral()</div><div class="line">  &#125;</div><div class="line">  dependencies &#123;</div><div class="line">    classpath <span class="string">'com.neenbedankt.gradle.plugins:android-apt:1.8'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Apply plugin</span></div><div class="line">apply plugin: <span class="string">'com.neenbedankt.android-apt'</span></div><div class="line"></div><div class="line"><span class="comment">// Add Dagger dependencies</span></div><div class="line">dependencies &#123;</div><div class="line">  compile <span class="string">'com.google.dagger:dagger:2.x'</span></div><div class="line">  apt <span class="string">'com.google.dagger:dagger-compiler:2.x'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Dagger-amp-Android"><a href="#Dagger-amp-Android" class="headerlink" title="Dagger&amp;Android"></a><span id="android">Dagger&amp;Android</span></h2><p>相对于其他依赖注入框架Dagger2最基本的优势之一就是完全生成代码（没有反射），这意味着它是可以应用于Anroid的。但当使用时还是有一些需要注意的地方。</p>
<h3 id="原理（Philosophy）"><a href="#原理（Philosophy）" class="headerlink" title="原理（Philosophy）"></a>原理（Philosophy）</h3><p>因为针对Android编写的代码是Java代码，所以在风格上常有很大区别，这种差异的存在以适应Android平台独特<a href="http://developer.android.com/training/best-performance.html" target="_blank" rel="external">性能</a>考虑。</p>
<p>为了生成通用且轻便的代码，Dagger基于<a href="http://proguard.sourceforge.net/" target="_blank" rel="external">ProGuard</a>对编译后的字节码进行后期处理。这样Dagger可以产生在server和Android上都很自然的代码，使用不同的工具链是生成的字节码在两个环境下都能高效执行。此外，Dagger可以明确保证其生成的Java代码在ProGuard优化后是可编译。</p>
<h2 id="多重绑定-Multibindings"><a href="#多重绑定-Multibindings" class="headerlink" title="多重绑定(Multibindings)"></a><span id="multibindings">多重绑定(Multibindings)</span></h2><p>Dagger支持将多个对象绑定进一个集合即使这些对象已经绑定在不同的module中。</p>
<p>你可以使用多重绑定实现插件架构，例如：不同的module都可以贡献自己对插件接口的实现这样中央类就可以使用这些插件集合。或者你可以有多个module贡献各自的service providers，以名称为键保存在一个map中。</p>
<h3 id="Set-multibindings"><a href="#Set-multibindings" class="headerlink" title="Set multibindings"></a>Set multibindings</h3><p>在module的方法上添加<a href="http://google.github.io/dagger/api/latest/dagger/multibindings/IntoSet.html" target="_blank" rel="external">@IntoSet</a>注解，向一个可注入的多重绑定的set贡献元素。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyModuleA</span> </span>&#123;</div><div class="line">  <span class="meta">@Provides</span> <span class="meta">@IntoSet</span></div><div class="line">  <span class="function"><span class="keyword">static</span> String <span class="title">provideOneString</span><span class="params">(DepA depA, DepB depB)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"ABC"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>你还可以在返回值为集合的方法使用<a href="http://google.github.io/dagger/api/latest/dagger/multibindings/ElementsIntoSet.html" target="_blank" rel="external">@ElementsIntoSet</a>注解来同时贡献多个元素。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyModuleB</span> </span>&#123;</div><div class="line">  <span class="meta">@Provides</span> <span class="meta">@ElementsIntoSet</span></div><div class="line">  <span class="function"><span class="keyword">static</span> Set&lt;String&gt; <span class="title">provideSomeStrings</span><span class="params">(DepA depA, DepB depB)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HashSet&lt;String&gt;(Arrays.asList(<span class="string">"DEF"</span>, <span class="string">"GHI"</span>));</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在component的一个绑定可以依赖这个set了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span> </span>&#123;</div><div class="line">  <span class="meta">@Inject</span> Bar(Set&lt;String&gt; strings) &#123;</div><div class="line">    <span class="keyword">assert</span> strings.contains(<span class="string">"ABC"</span>);</div><div class="line">    <span class="keyword">assert</span> strings.contains(<span class="string">"DEF"</span>);</div><div class="line">    <span class="keyword">assert</span> strings.contains(<span class="string">"GHI"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>component也可以提供这个set:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(modules = &#123;MyModuleA.class, MyModuleB.class&#125;)</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyComponent</span> </span>&#123;</div><div class="line">  <span class="function">Set&lt;String&gt; <span class="title">strings</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Test</span> <span class="function"><span class="keyword">void</span> <span class="title">testMyComponent</span><span class="params">()</span> </span>&#123;</div><div class="line">  MyComponent myComponent = DaggerMyComponent.create();</div><div class="line">  assertThat(myComponent.strings()).containsExactly(<span class="string">"ABC"</span>, <span class="string">"DEF"</span>, <span class="string">"GHI"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>除了可以依赖多重绑定的Set<foo>，还可以依赖Provider<set<foo>&gt;或者Lazy<set<foo>&gt;，不可以依赖Set<provider<foo>&gt;.</provider<foo></set<foo></set<foo></foo></p>
<p>给每个@Provides方法添加qualifier向限定的多重绑定set贡献元素。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyModuleC</span> </span>&#123;</div><div class="line">  <span class="meta">@Provides</span> <span class="meta">@IntoSet</span></div><div class="line">  <span class="meta">@MyQualifier</span></div><div class="line">  <span class="function"><span class="keyword">static</span> Foo <span class="title">provideOneFoo</span><span class="params">(DepA depA, DepB depB)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Foo(depA, depB);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyModuleD</span> </span>&#123;</div><div class="line">  <span class="meta">@Provides</span></div><div class="line">  <span class="function"><span class="keyword">static</span> FooSetUser <span class="title">provideFooSetUser</span><span class="params">(@MyQualifier Set&lt;Foo&gt; foos)</span> </span>&#123; … &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="Map-multibindings"><a href="#Map-multibindings" class="headerlink" title="Map multibindings"></a>Map multibindings</h4><p>Dagger支持使用多重绑定向一个可注入的map贡献entry只要这个map的key在编译期是可见的。</p>
<p>在module中添加带有返回值的方法添加<a href="http://google.github.io/dagger/api/latest/dagger/multibindings/IntoMap.html" target="_blank" rel="external">@IntoMap</a>注解和指定key的自定义注解。为了向一个限定的多重绑定map贡献entry,需要给每个@IntoMap方法添加qualifier注解。</p>
<p>然后你就可以注入map(Map<k,v>)本身或包含providers的map(Map<k,provider<v>&gt;).当你不想一次初始化所有对象而是想一次只拿到一个值的时候或当你想在每次查询map时都拿到新的对象时后者更有用。</k,provider<v></k,v></p>
<h5 id="Simple-map-keys"><a href="#Simple-map-keys" class="headerlink" title="Simple map keys"></a>Simple map keys</h5><p>对于那些键是string、Class&lt;?&gt;或封装的原始类型的map,使用<a href="http://google.github.io/dagger/api/latest/dagger/mapkeys/package-summary.html" target="_blank" rel="external">dagger.mapkeys</a>中定义的标准注解.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyModule</span> </span>&#123;</div><div class="line">  <span class="meta">@Provides</span> <span class="meta">@IntoMap</span></div><div class="line">  <span class="meta">@StringKey</span>(<span class="string">"foo"</span>)</div><div class="line">  <span class="function"><span class="keyword">static</span> Long <span class="title">provideFooValue</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">100L</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Provides</span> <span class="meta">@IntoMap</span></div><div class="line">  <span class="meta">@ClassKey</span>(Thing.class)</div><div class="line">  <span class="function"><span class="keyword">static</span> String <span class="title">provideThingValue</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"value for Thing"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Component</span>(modules = MyModule.class)</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyComponent</span> </span>&#123;</div><div class="line">  <span class="function">Map&lt;String, Long&gt; <span class="title">longsByString</span><span class="params">()</span></span>;</div><div class="line">  Map&lt;Class&lt;?&gt;, String&gt; stringsByClass();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Test</span> <span class="function"><span class="keyword">void</span> <span class="title">testMyComponent</span><span class="params">()</span> </span>&#123;</div><div class="line">  MyComponent myComponent = DaggerMyComponent.create();</div><div class="line">  assertThat(myComponent.longsByString().get(<span class="string">"foo"</span>)).isEqualTo(<span class="number">100L</span>);</div><div class="line">  assertThat(myComponent.stringsByClass().get(Thing.class))</div><div class="line">      .isEqualTo(<span class="string">"value for Thing"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对于key是枚举或泛型化类的map,定义一个包含map的key类型成员的注解并添加<a href="http://google.github.io/dagger/api/latest/dagger/MapKey.html" target="_blank" rel="external">@MapKey</a>注解。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> MyEnum &#123;</div><div class="line">  ABC, DEF;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@MapKey</span></div><div class="line"><span class="meta">@interface</span> MyEnumKey &#123;</div><div class="line">  <span class="function">MyEnum <span class="title">value</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@MapKey</span></div><div class="line"><span class="meta">@interface</span> MyNumberClassKey &#123;</div><div class="line">  Class&lt;? extends Number&gt; value();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyModule</span> </span>&#123;</div><div class="line">  <span class="meta">@Provides</span> <span class="meta">@IntoMap</span></div><div class="line">  <span class="meta">@MyEnumKey</span>(MyEnum.ABC)</div><div class="line">  <span class="function"><span class="keyword">static</span> String <span class="title">provideABCValue</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"value for ABC"</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Provides</span> <span class="meta">@IntoMap</span></div><div class="line">  <span class="meta">@MyNumberClassKey</span>(BigDecimal.class)</div><div class="line">  <span class="function"><span class="keyword">static</span> String <span class="title">provideBigDecimalValue</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"value for BigDecimal"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Component</span>(modules = MyModule.class)</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyComponent</span> </span>&#123;</div><div class="line">  <span class="function">Map&lt;MyEnum, String&gt; <span class="title">myEnumStringMap</span><span class="params">()</span></span>;</div><div class="line">  Map&lt;Class&lt;? extends Number&gt;, String&gt; stringsByNumberClass();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Test</span> <span class="function"><span class="keyword">void</span> <span class="title">testMyComponent</span><span class="params">()</span> </span>&#123;</div><div class="line">  MyComponent myComponent = DaggerMyComponent.create();</div><div class="line">  assertThat(myComponent.myEnumStringMap().get(MyEnum.ABC)).isEqualTo(<span class="string">"value for ABC"</span>);</div><div class="line">  assertThat(myComponent.stringsByNumberClass.get(BigDecimal.class))</div><div class="line">      .isEqualTo(<span class="string">"value for BigDecimal"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>你的自定义注解可以是任何名字，并且可以是任何正确的注解成员类型除了数组类型。</p>
<h5 id="Complex-map-keys"><a href="#Complex-map-keys" class="headerlink" title="Complex map keys"></a>Complex map keys</h5><p>如果用一个注解成员不足以描述你的map的key,你可以使用整个注解作为key,只把@MapKey的unwrapValue设置为false，在这种情况下，自定义注解也可以包含数组成员。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@MapKey</span>(unwrapValue = <span class="keyword">false</span>)</div><div class="line"><span class="meta">@interface</span> MyKey &#123;</div><div class="line">  <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</div><div class="line">  Class&lt;?&gt; implementingClass();</div><div class="line">  <span class="keyword">int</span>[] thresholds();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyModule</span> </span>&#123;</div><div class="line">  <span class="meta">@Provides</span> <span class="meta">@IntoMap</span></div><div class="line">  <span class="meta">@MyKey</span>(name = <span class="string">"abc"</span>, implementingClass = Abc.class, thresholds = &#123;<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>&#125;)</div><div class="line">  <span class="function"><span class="keyword">static</span> String <span class="title">provideAbc1510Value</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"foo"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Component</span>(modules = MyModule.class)</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyComponent</span> </span>&#123;</div><div class="line">  <span class="function">Map&lt;MyKey, String&gt; <span class="title">myKeyStringMap</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用@AutoAnnotation来创建注解实例。<br>如果map使用复杂key,那你可能需要在运行时创建@MapKey注解实例传给get(Object)方法。最简单的做法是使用@AutoAnnotation创建初始化注解实例的静态方法。更多细节查看@AutoAnnotation<a href="https://github.com/google/auto/blob/master/value/src/main/java/com/google/auto/value/AutoAnnotation.java" target="_blank" rel="external">文档</a>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponentTest</span> </span>&#123;</div><div class="line">  <span class="meta">@Test</span> <span class="function"><span class="keyword">void</span> <span class="title">testMyComponent</span><span class="params">()</span> </span>&#123;</div><div class="line">    MyComponent myComponent = DaggerMyComponent.create();</div><div class="line">    assertThat(myComponent.myKeyStringMap()</div><div class="line">        .get(createMyKey(<span class="string">"abc"</span>, Abc.class, <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>&#125;))</div><div class="line">        .isEqualTo(<span class="string">"foo"</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@AutoAnnotation</span></div><div class="line">  <span class="function"><span class="keyword">static</span> MyKey <span class="title">createMyKey</span><span class="params">(String name, Class&lt;?&gt; implementingClass, <span class="keyword">int</span>[] thresholds)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AutoAnnotation_MyComponentTest_createMyKey(name, implementingClass, thresholds);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="Maps-whose-keys-are-not-known-at-compile-time"><a href="#Maps-whose-keys-are-not-known-at-compile-time" class="headerlink" title="Maps whose keys are not known at compile time"></a>Maps whose keys are not known at compile time</h5><p>编译期map的key可以确定或可以用注解表示的Map多重绑定才有效。如果你的map不满足这些限制，那就不能创建多重绑定map,但你可以使用set multibindings 绑定对象然后再转换为非多重绑定的map<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyModule</span> </span>&#123;</div><div class="line">  <span class="meta">@Provides</span> <span class="meta">@IntoSet</span></div><div class="line">  <span class="keyword">static</span> Map.<span class="function">Entry&lt;Foo, Bar&gt; <span class="title">entryOne</span><span class="params">(…)</span> </span>&#123;</div><div class="line">    Foo key = …;</div><div class="line">    Bar value = …;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SimpleImmutableEntry(key, value);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Provides</span> <span class="meta">@IntoSet</span></div><div class="line">  <span class="keyword">static</span> Map.<span class="function">Entry&lt;Foo, Bar&gt; <span class="title">entryTwo</span><span class="params">(…)</span> </span>&#123;</div><div class="line">    Foo key = …;</div><div class="line">    Bar value = …;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SimpleImmutableEntry(key, value);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMapModule</span> </span>&#123;</div><div class="line">  <span class="meta">@Provides</span></div><div class="line">  <span class="function"><span class="keyword">static</span> Map&lt;Foo, Bar&gt; <span class="title">fooBarMap</span><span class="params">(Set&lt;Map.Entry&lt;Foo, Bar&gt;&gt; entries)</span> </span>&#123;</div><div class="line">    Map&lt;Foo, Bar&gt; fooBarMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;(entries.size());</div><div class="line">    <span class="keyword">for</span> (Map.Entry&lt;Foo, Bar&gt; entry : entries) &#123;</div><div class="line">      fooBarMap.put(entry.getKey(), entry.getValue());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> fooBarMap;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意这种方式就不会有Map<foo,provider<bar>&gt;的自动绑定了。如果你想要providers map，就需要multibound set的Map.Entry对象中包含providers。然后你的非多重绑定的map就可以有Provider值了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyModule</span> </span>&#123;</div><div class="line">  <span class="meta">@Provides</span> <span class="meta">@IntoSet</span></div><div class="line">  <span class="keyword">static</span> Map.Entry&lt;Foo, Provider&lt;Bar&gt;&gt; entry(</div><div class="line">      Provider&lt;BarSubclass&gt; barSubclassProvider) &#123;</div><div class="line">    Foo key = …;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SimpleImmutableEntry(key, barSubclassProvider);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyProviderMapModule</span> </span>&#123;</div><div class="line">  <span class="meta">@Provides</span></div><div class="line">  <span class="keyword">static</span> Map&lt;Foo, Provider&lt;Bar&gt;&gt; fooBarProviderMap(</div><div class="line">      Set&lt;Map.Entry&lt;Foo, Provider&lt;Bar&gt;&gt;&gt; entries) &#123;</div><div class="line">    <span class="keyword">return</span> …;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></foo,provider<bar></p>
<h4 id="Declaring-multibindings"><a href="#Declaring-multibindings" class="headerlink" title="Declaring multibindings"></a>Declaring multibindings</h4><p>你可以向module中返回set或map的方法添加<a href="http://google.github.io/dagger/api/latest/dagger/multibindings/Multibinds.html" target="_blank" rel="external">@Multibinds</a>注解来声明多重绑定的set或map.</p>
<p>对于至少有<a href="http://google.github.io/dagger/api/latest/dagger/multibindings/IntoSet.html" target="_blank" rel="external">@IntoSet</a>,<a href="http://google.github.io/dagger/api/latest/dagger/multibindings/ElementsIntoSet.html" target="_blank" rel="external">@ElementsIntoSet</a>,或<a href="http://google.github.io/dagger/api/latest/dagger/multibindings/IntoMap.html" target="_blank" rel="external">@IntoMap</a>绑定中一个的set或map没必要使用@Multibinds,但如果他们可能为空则必须要添加此声明。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MyModule</span> </span>&#123;</div><div class="line">  <span class="meta">@Multibinds</span> <span class="function"><span class="keyword">abstract</span> Set&lt;Foo&gt; <span class="title">aSet</span><span class="params">()</span></span>;</div><div class="line">  <span class="meta">@Multibinds</span> <span class="meta">@MyQualifier</span> <span class="function"><span class="keyword">abstract</span> Set&lt;Foo&gt; <span class="title">aQualifiedSet</span><span class="params">()</span></span>;</div><div class="line">  <span class="meta">@Multibinds</span> <span class="function"><span class="keyword">abstract</span> Map&lt;String, Foo&gt; <span class="title">aMap</span><span class="params">()</span></span>;</div><div class="line">  <span class="meta">@Multibinds</span> <span class="meta">@MyQualifier</span> <span class="function"><span class="keyword">abstract</span> Map&lt;String, Foo&gt; <span class="title">aQualifiedMap</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>给定的set或map多重绑定可以被声明多次。Dagger不会实现或调用<a href="http://google.github.io/dagger/api/latest/dagger/multibindings/Multibinds.html" target="_blank" rel="external">@Multibinds</a>.</p>
<h5 id="Alternative-ElementsIntoSet-returning-an-empty-set"><a href="#Alternative-ElementsIntoSet-returning-an-empty-set" class="headerlink" title="Alternative: @ElementsIntoSet returning an empty set"></a>Alternative: @ElementsIntoSet returning an empty set</h5><p>对于空的set,作为替代方案，你可以在方法上添加<a href="http://google.github.io/dagger/api/latest/dagger/multibindings/ElementsIntoSet.html" target="_blank" rel="external">@ElementsIntoSet</a>.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEmptySetModule</span> </span>&#123;</div><div class="line">  <span class="meta">@Provides</span> <span class="meta">@ElementsIntoSet</span></div><div class="line">  <span class="function"><span class="keyword">static</span> Set&lt;Foo&gt; <span class="title">primeEmptyFooSet</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> Collections.emptySet();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="Inherited-subcomponent-multibindings"><a href="#Inherited-subcomponent-multibindings" class="headerlink" title="Inherited subcomponent multibindings"></a>Inherited subcomponent multibindings</h4><p>subcomponent中的绑定可以依赖父component中的多重绑定set或map,就像其他绑定也是可以依赖父类的一样。subcomponent也可以向父component中绑定的多重绑定set或map添加元素，只需在module中添加合适的@Provides方法。</p>
<p>这种情况下，set和map根据注入的位置不同而不同。当它注入到定义在subcomponent的绑定时，它就会包含subcomponent和其父component的值或entry。当注入到父component中定义的绑定时，那它只包含此处定义的值或entry。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(modules = ParentModule.class)</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ParentComponent</span> </span>&#123;</div><div class="line">  <span class="function">Set&lt;String&gt; <span class="title">strings</span><span class="params">()</span></span>;</div><div class="line">  <span class="function">Map&lt;String, String&gt; <span class="title">stringMap</span><span class="params">()</span></span>;</div><div class="line">  <span class="function">ChildComponent <span class="title">childComponent</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParentModule</span> </span>&#123;</div><div class="line">  <span class="meta">@Provides</span> <span class="meta">@IntoSet</span></div><div class="line">  <span class="function"><span class="keyword">static</span> String <span class="title">string1</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="string">"parent string 1"</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Provides</span> <span class="meta">@IntoSet</span></div><div class="line">  <span class="function"><span class="keyword">static</span> String <span class="title">string2</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="string">"parent string 2"</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Provides</span> <span class="meta">@IntoMap</span></div><div class="line">  <span class="meta">@StringKey</span>(<span class="string">"a"</span>)</div><div class="line">  <span class="function"><span class="keyword">static</span> String <span class="title">stringA</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="string">"parent string A"</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Provides</span> <span class="meta">@IntoMap</span></div><div class="line">  <span class="meta">@StringKey</span>(<span class="string">"b"</span>)</div><div class="line">  <span class="function"><span class="keyword">static</span> String <span class="title">stringB</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="string">"parent string B"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Subcomponent</span>(modules = ChildModule.class)</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ChildComponent</span> </span>&#123;</div><div class="line">  <span class="function">Set&lt;String&gt; <span class="title">strings</span><span class="params">()</span></span>;</div><div class="line">  <span class="function">Map&lt;String, String&gt; <span class="title">stringMap</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChildModule</span> </span>&#123;</div><div class="line">  <span class="meta">@Provides</span> <span class="meta">@IntoSet</span></div><div class="line">  <span class="function"><span class="keyword">static</span> String <span class="title">string3</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="string">"child string 3"</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Provides</span> <span class="meta">@IntoSet</span></div><div class="line">  <span class="function"><span class="keyword">static</span> String <span class="title">string4</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="string">"child string 4"</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Provides</span> <span class="meta">@IntoMap</span></div><div class="line">  <span class="meta">@StringKey</span>(<span class="string">"c"</span>)</div><div class="line">  <span class="function"><span class="keyword">static</span> String <span class="title">stringC</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="string">"child string C"</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Provides</span> <span class="meta">@IntoMap</span></div><div class="line">  <span class="meta">@StringKey</span>(<span class="string">"d"</span>)</div><div class="line">  <span class="function"><span class="keyword">static</span> String <span class="title">stringD</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="string">"child string D"</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Test</span> <span class="function"><span class="keyword">void</span> <span class="title">testMultibindings</span><span class="params">()</span> </span>&#123;</div><div class="line">  ParentComponent parentComponent = DaggerParentComponent.create();</div><div class="line">  assertThat(parentComponent.strings()).containsExactly(</div><div class="line">      <span class="string">"parent string 1"</span>, <span class="string">"parent string 2"</span>);</div><div class="line">  assertThat(parentComponent.stringMap().keySet()).containsExactly(<span class="string">"a"</span>, <span class="string">"b"</span>);</div><div class="line"></div><div class="line">  ChildComponent childComponent = parentComponent.childComponent();</div><div class="line">  assertThat(childComponent.strings()).containsExactly(</div><div class="line">      <span class="string">"parent string 1"</span>, <span class="string">"parent string 2"</span>, <span class="string">"child string 3"</span>, <span class="string">"child string 4"</span>);</div><div class="line">  assertThat(childComponent.stringMap().keySet()).containsExactly(</div><div class="line">      <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="Subcomponents"><a href="#Subcomponents" class="headerlink" title="Subcomponents"></a><span id="subcomponent">Subcomponents</span></h2><p>继承和扩展父component对象图的component称为subcomponent。你可以使用它们把你的应用划分为不同子图，封装为不同的模块或在component中使用不同地域。</p>
<p>subcomponent中绑定的对象可以依赖绑定在父级component中的任意对象和自己module中绑定的对象，但不能依赖兄弟级component中绑定的对象。</p>
<p>换句话说，subcomponent的父级component的对象图是这subcomponent对象图的子图。</p>
<h3 id="Declaring-a-subcomponent"><a href="#Declaring-a-subcomponent" class="headerlink" title="Declaring a subcomponent"></a>Declaring a subcomponent</h3><p>就像声明上层component一样，创建<a href="http://google.github.io/dagger/api/latest/dagger/Component.html#component-methods" target="_blank" rel="external">抽象类或接口并声明抽象方法返回你需要的类型</a>，然后添加<a href="http://google.github.io/dagger/api/latest/dagger/Subcomponent.html" target="_blank" rel="external">@Subcomponent</a>注解而不是<a href="http://google.github.io/dagger/api/latest/dagger/Component.html" target="_blank" rel="external">@Component</a>，设置<a href="http://google.github.io/dagger/api/latest/dagger/Module.html" target="_blank" rel="external">@Modules</a>.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Subcomponent</span>(modules = RequestModule.class)</div><div class="line">inferface RequestComponent &#123;</div><div class="line">  <span class="function">RequestHandler <span class="title">requestHandler</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Adding-a-subcomponent-to-a-parent-component"><a href="#Adding-a-subcomponent-to-a-parent-component" class="headerlink" title="Adding a subcomponent to a parent component"></a>Adding a subcomponent to a parent component</h3><p>向父级component添加子component，只需在父级component添加返回值为子component的抽象工厂方法。如果子component需要一个没有无参构造器的module,需要在工厂方法添加该module类型的参数。这个工厂方法可能还有其他subcomponent中的module参数。（这个subcomponent会自动和parent component分享module实例）。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(modules = &#123;ServerModule.class, AuthModule.class&#125;)</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ServerComponent</span> </span>&#123;</div><div class="line">  <span class="function">Server <span class="title">server</span><span class="params">()</span></span>;</div><div class="line">  <span class="function">SessionComponent <span class="title">sessionComponent</span><span class="params">(SessionModule sessionModule)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Subcomponent</span>(modules = SessionModule.class)</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">SessionComponent</span> </span>&#123;</div><div class="line">  <span class="function">SessionInfo <span class="title">sessionInfo</span><span class="params">()</span></span>;</div><div class="line">  <span class="function">RequestComponent <span class="title">requestComponent</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Subcomponent</span>(modules = &#123;RequestModule.class, AuthModule.class&#125;)</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">RequestComponent</span> </span>&#123;</div><div class="line">  <span class="function">RequestHandler <span class="title">requestHandler</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>SessionComponent中绑定的module可以依赖ServerComponent中绑定的module,RequestComponent中绑定module同时依赖SessionComponent和ServerComponent绑定的module.</p>
<p>你可以通过调用parent component的工厂方法来创建subcomponent的实例。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ServerComponent serverComponent = DaggerServerComponent.create();</div><div class="line">SessionComponent sessionComponent =</div><div class="line">    serverComponent.sessionComponent(<span class="keyword">new</span> SessionModule(…));</div><div class="line">RequestComponent requestComponent = sessionComponent.requestComponent();</div></pre></td></tr></table></figure></p>
<p>通常你需要parent component中的对象绑定来创建subcomponent。为了完成这些，你可以基于任何component中的绑定都可以依赖这个component类型本身。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BoundInServerComponent</span> </span>&#123;</div><div class="line">  <span class="meta">@Inject</span> ServerComponent serverComponent;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">doSomethingWithSessionInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">    SessionComponent sessionComponent =</div><div class="line">        serverComponent.sessionComponent(<span class="keyword">new</span> SessionModule(…));</div><div class="line">    sessionComponent.sessionInfo().doSomething();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Subcomponent-builders"><a href="#Subcomponent-builders" class="headerlink" title="Subcomponent builders"></a>Subcomponent builders</h3><p>你也可以按照component builders的定义方式定为component定义builder.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(modules = &#123;ServerModule.class, AuthModule.class&#125;)</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ServerComponent</span> </span>&#123;</div><div class="line">  <span class="function">Server <span class="title">server</span><span class="params">()</span></span>;</div><div class="line">  SessionComponent.<span class="function">Builder <span class="title">sessionComponentBuilder</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Subcomponent</span>(modules = SessionModule.class)</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">SessionComponent</span> </span>&#123;</div><div class="line">  <span class="meta">@Subcomponent</span>.Builder</div><div class="line">  <span class="class"><span class="keyword">interface</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">    <span class="function">Builder <span class="title">sessionModule</span><span class="params">(SessionModule sessionModule)</span></span>;</div><div class="line">    <span class="function">SessionComponent <span class="title">build</span><span class="params">()</span></span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ServerComponent serverComponent = DaggerServerComponent.create();</div><div class="line">SessionComponent sessionComponent = serverComponent.sessionComponentBuilder()</div><div class="line">    .sessionModule(<span class="keyword">new</span> SessionModule(…))</div><div class="line">    .build();</div></pre></td></tr></table></figure></p>
<p><strong>注入subcomponent builder</strong><br>就像component本身一样，subcomponent builder也是绑定在对象图中的也可以被注入。所以与其注入component然后调用subcomponent builder方法不如直接注入builder。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** 注入subcomponent builder. 这比下面的方法要简单*/</span></div><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">SessionStarterInjectingSubcomponentBuilder</span> </span>&#123;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">final</span> SessionComponent.Builder sessionComponentBuilder;</div><div class="line">   </div><div class="line">   <span class="meta">@Inject</span> SessionStarterInjectingSubcomponentBuilder(</div><div class="line">       SessionComponent.Builder sessionComponentBuilder) &#123;</div><div class="line">     <span class="keyword">this</span>.sessionComponentBuilder = sessionComponentBuilder;</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   <span class="function">Session <span class="title">startSession</span><span class="params">()</span> </span>&#123;</div><div class="line">     <span class="keyword">return</span> sessionComponentBuilder</div><div class="line">         .sessionModule(<span class="keyword">new</span> SessionModule(…))</div><div class="line">         .build()</div><div class="line">         .session();</div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line">	</div><div class="line"> <span class="comment">/**</span></div><div class="line">  * 注入component然后调用其工厂方法. 比上面的方法麻烦	   */</div><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">SessionStarterInjectingComponent</span> </span>&#123;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">final</span> ServerComponent serverComponent;</div><div class="line">   </div><div class="line">   <span class="meta">@Inject</span> SessionStarterInjectingComponent(ServerComponent serverComponent) &#123;</div><div class="line">     <span class="keyword">this</span>.serverComponent = serverComponent;</div><div class="line">   &#125;</div><div class="line">	</div><div class="line">   <span class="function">Session <span class="title">startSession</span><span class="params">()</span> </span>&#123;</div><div class="line">     <span class="keyword">return</span> serverComponent.sessionComponentBuilder()</div><div class="line">         .sessionModule(<span class="keyword">new</span> SessionModule(…))</div><div class="line">         .build()</div><div class="line">         .session();</div><div class="line">   &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>注意：SessionStarterInjectingSubcomponentBuilder并不依赖ServerComponent。</p>
<h3 id="Subcomponents-and-scope"><a href="#Subcomponents-and-scope" class="headerlink" title="Subcomponents and scope"></a>Subcomponents and scope</h3><p>将component划分为subcomponent的理由之一是使用<a href="http://docs.oracle.com/javaee/7/api/javax/inject/Scope.html" target="_blank" rel="external">scopes</a>;在普通的没有域的绑定中，一个注入的类型可能每次拿到的是新的独立的实例。但如果这个绑定使用了域，在这个域的生命周期中所有的用户都能拿到同一个实例。</p>
<p>典型的域是<a href="http://docs.oracle.com/javaee/7/api/javax/inject/Singleton.html" target="_blank" rel="external">@Singleton</a>。使用singleton域注解绑定的用户都拿到同一个对象。</p>
<p>Dagger中,可以通过<a href="http://docs.oracle.com/javaee/7/api/javax/inject/Scope.html" target="_blank" rel="external">@Scope</a>注解将component和域联系起来。这种情况下，component的实现持有所有绑定域的对象，所以它们就可以被复用。如果Module中的<a href="http://google.github.io/dagger/api/latest/dagger/Provides.html" target="_blank" rel="external">@Provides</a>方法被一个域注解了，那么这个module只能设置给被同一个域注解的component。</p>
<p>（<a href="http://docs.oracle.com/javaee/7/api/javax/inject/Inject.html" target="_blank" rel="external">@Inject</a>构造器也可以被域注解注解。这些隐式绑定可被其他相同域的component或其后代component使用。被注解的实例将会绑定正确的作用域）。</p>
<p>subcomponent不可以与任何父级component<br>有相同的域，但两个互相独立的subcomponent可以绑定同一个作用域因为不会对哪里保存域对象造成歧义。（即使使用了相同的域注解，这两个subcomponent也拥有不同的域对象。）</p>
<p>例如：在下面的component树中，BadChildComponent拥有和其父亲RootComponent相同的@RootScpe，这是一个错误。但SiblingComponentOne和SiblingComponentTwo可以一起使用@ChildScope，因为不会对两个component中的同类型绑定造成混淆。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RootScope</span> <span class="meta">@Component</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">RootComponent</span> </span>&#123;</div><div class="line">  <span class="function">BadChildComponent <span class="title">badChildComponent</span><span class="params">()</span></span>; <span class="comment">// ERROR!</span></div><div class="line">  <span class="function">SiblingComponentOne <span class="title">siblingComponentOne</span><span class="params">()</span></span>;</div><div class="line">  <span class="function">SiblingComponentTwo <span class="title">siblingComponentTwo</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@RootScope</span> <span class="meta">@Subcomponent</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">BadChildComponent</span> </span>&#123;…&#125;</div><div class="line"></div><div class="line"><span class="meta">@ChildScope</span> <span class="meta">@Subcomponent</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">SiblingComponentOne</span> </span>&#123;…&#125;</div><div class="line"></div><div class="line"><span class="meta">@ChildScope</span> <span class="meta">@Subcomponent</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">SiblingComponentTwo</span> </span>&#123;…&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Subcomponents-for-encapsulation"><a href="#Subcomponents-for-encapsulation" class="headerlink" title="Subcomponents for encapsulation"></a>Subcomponents for encapsulation</h3><p>使用subcomponent的另一个原因是将应用的不同部分封装。例如：如果你的服务器中有两个服务（或应用中的两个界面）共享一些绑定，如认证和授权的部分，但它们还有其他与对方没有关系的绑定。为每个服务或界面创建独立的subcomponent将共享的绑定放到parent component,这样就说得通了。在上面的例子中，FooRequestComponent和 BarRequestComponent是隔离的兄弟component。你可以把他们及其module结合到一个@RequestScope component中,但会产生冲突的绑定。</p>
<h3 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h3><h4 id="Extending-multibindings"><a href="#Extending-multibindings" class="headerlink" title="Extending multibindings"></a>Extending multibindings</h4><p>像其他的绑定一样，parent component中的<a href="#multibindings">multibindings</a>对其subcomponent也是可见的。但subcomponent也可以像父component绑定的map和set添加multibinding.其他的这类贡献只对该subcomponent和其子component的绑定可见，对其父component不可见。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(modules = ParentModule.class)</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Parent</span> </span>&#123;</div><div class="line">  <span class="function">Map&lt;String, Int&gt; <span class="title">map</span><span class="params">()</span></span>;</div><div class="line">  <span class="function">Set&lt;String&gt; <span class="title">set</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">  <span class="function">Child <span class="title">child</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParentModule</span> </span>&#123;</div><div class="line">  <span class="meta">@Provides</span> <span class="meta">@IntoMap</span></div><div class="line">  <span class="meta">@StringKey</span>(<span class="string">"one"</span>) <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">one</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Provides</span> <span class="meta">@IntoMap</span></div><div class="line">  <span class="meta">@StringKey</span>(<span class="string">"two"</span>) <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">two</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Provides</span> <span class="meta">@IntoSet</span></div><div class="line">  <span class="function"><span class="keyword">static</span> String <span class="title">a</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"a"</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Provides</span> <span class="meta">@IntoSet</span></div><div class="line">  <span class="function"><span class="keyword">static</span> String <span class="title">b</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"b"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Subcomponent</span>(modules = Child.class)</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Child</span> </span>&#123;</div><div class="line">  <span class="function">Map&lt;String, String&gt; <span class="title">map</span><span class="params">()</span></span>;</div><div class="line">  <span class="function">Set&lt;String&gt; <span class="title">set</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChildModule</span> </span>&#123;</div><div class="line">  <span class="meta">@Provides</span> <span class="meta">@IntoMap</span></div><div class="line">  <span class="meta">@StringKey</span>(<span class="string">"three"</span>) <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">three</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">3</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Provides</span> <span class="meta">@IntoMap</span></div><div class="line">  <span class="meta">@StringKey</span>(<span class="string">"four"</span>) <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">four</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">4</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Provides</span> <span class="meta">@IntoSet</span></div><div class="line">  <span class="function"><span class="keyword">static</span> String <span class="title">c</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"c"</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Provides</span> <span class="meta">@IntoSet</span></div><div class="line">  <span class="function"><span class="keyword">static</span> String <span class="title">d</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"d"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Parent parent = DaggerParent.create();</div><div class="line">Child child = parent.child();</div><div class="line">assertThat(parent.map().keySet()).containsExactly(<span class="string">"one"</span>, <span class="string">"two"</span>);</div><div class="line">assertThat(child.map().keySet()).containsExactly(<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>, <span class="string">"four"</span>);</div><div class="line">assertThat(parent.set()).containsExactly(<span class="string">"a"</span>, <span class="string">"b"</span>);</div><div class="line">assertThat(child.set()).containsExactly(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>);</div></pre></td></tr></table></figure></p>
<h4 id="Repeated-modules"><a href="#Repeated-modules" class="headerlink" title="Repeated modules"></a>Repeated modules</h4><p>component和其任意一个subcomponent都设置了类型的module,那么所有这些component都会使用同一个该module实例。这意味着如果一个subcomponent工厂方法包含一个重复module作为参数或者你使用重复module调用subcomponent建造方法会造成错误。（后者在编译期无法检测，是一个运行时错误）。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(modules = &#123;RepeatedModule.class, …&#125;)</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ComponentOne</span> </span>&#123;</div><div class="line">  <span class="function">ComponentTwo <span class="title">componentTwo</span><span class="params">(RepeatedModule repeatedModule)</span></span>; <span class="comment">// COMPILE ERROR!</span></div><div class="line">  ComponentThree.<span class="function">Builder <span class="title">componentThreeBuilder</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Subcomponent</span>(modules = &#123;RepeatedModule.class, …&#125;)</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ComponentTwo</span> </span>&#123; … &#125;</div><div class="line"></div><div class="line"><span class="meta">@Subcomponent</span>(modules = &#123;RepeatedModule.class, …&#125;)</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ComponentThree</span> </span>&#123;</div><div class="line">  <span class="meta">@Subcomponent</span>.Builder</div><div class="line">  <span class="class"><span class="keyword">interface</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">    <span class="function">Builder <span class="title">repeatedModule</span><span class="params">(RepeatedModule repeatedModule)</span></span>;</div><div class="line">    <span class="function">ComponentThree <span class="title">build</span><span class="params">()</span></span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">DaggerComponentOne.create().componentThreeBuilder()</div><div class="line">    .repeatedModule(<span class="keyword">new</span> RepeatedModule()) <span class="comment">// UnsupportedOperationException!</span></div><div class="line">    .build();</div></pre></td></tr></table></figure></p>
<h2 id="Producers"><a href="#Producers" class="headerlink" title="Producers"></a><span id="producers">Producers</span></h2><p>Dagger Producers是一个使用Java实现异步依赖注入的Dagger扩展。</p>
<h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>这里假设读者已经熟悉<a href="http://google.github.io/dagger/" target="_blank" rel="external">Dagger2API</a>和Guava的<a href="http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/util/concurrent/ListenableFuture.html" target="_blank" rel="external">ListenableFuture</a>.</p>
<p>Dagger Producers提供了几种新的注解，<a href="http://google.github.io/dagger/api/latest/dagger/producers/ProducerModule.html" target="_blank" rel="external">@ProducerModule</a>，<a href="http://google.github.io/dagger/api/latest/dagger/producers/Produces.html" target="_blank" rel="external">@Producers</a>和<a href="http://google.github.io/dagger/api/latest/dagger/producers/ProductionComponent.html" target="_blank" rel="external">@ProductionComponent</a>分别类比<a href="http://google.github.io/dagger/api/latest/dagger/Module.html" target="_blank" rel="external">@Module</a>,<a href="http://google.github.io/dagger/api/latest/dagger/Provides.html" target="_blank" rel="external">@Provides</a>和<a href="http://google.github.io/dagger/api/latest/dagger/Component.html" target="_blank" rel="external">@Component</a>.我们把@ProducerModule注解的类作为<strong>producer modules</strong>,@Produces注解的方法作为<strong>producer methods</strong>,@ProductionComponent注解的接口作为<strong>producer graphs</strong>(类比于<strong>modules,provider methods</strong>,和<strong>object graphs</strong>).</p>
<p>并发编程是一个难题，但是一个强大而简单的抽象可以显著的简化并发的编写。出于这样的考虑，Guava 定义了 ListenableFuture接口并继承了JDK concurrent包下的Future 接口。</p>
<p>所以我没有继续翻译这篇文档。详情点击<a href="http://ifeve.com/google-guava-listenablefuture/" target="_blank" rel="external">ListenableFuture</a>，详情点击<a href="http://google.github.io/dagger/producers.html" target="_blank" rel="external">Producers</a>。</p>
<h2 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a><span id="testing">Testing</span></h2><p>使用依赖注入框架会使测试变得更简单。本文档中探索了一些测试使用了Dagger的应用的策略。</p>
<h3 id="Don’t-use-Dagger-for-unit-testing"><a href="#Don’t-use-Dagger-for-unit-testing" class="headerlink" title="Don’t use Dagger for unit testing"></a>Don’t use Dagger for unit testing</h3><p>如果你想写一个小的单元测试测试一个@Inject注解的类，不需要在测试代码中使用Dagger,只需调用@Inject注解的构造器和方法并设置给@Inject注解的字段即可，也可以直接传入模拟的依赖对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ThingDoer</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ThingGetter getter;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ThingPutter putter;</div><div class="line"></div><div class="line">  <span class="meta">@Inject</span> ThingDoer(ThingGetter getter, ThingPutter putter) &#123;</div><div class="line">    <span class="keyword">this</span>.getter = getter;</div><div class="line">    <span class="keyword">this</span>.putter = putter;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function">String <span class="title">doTheThing</span><span class="params">(<span class="keyword">int</span> howManyTimes)</span> </span>&#123; <span class="comment">/* … */</span> &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThingDoerTest</span> </span>&#123;</div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDoTheThing</span><span class="params">()</span> </span>&#123;</div><div class="line">    ThingDoer doer = <span class="keyword">new</span> ThingDoer(fakeGetter, fakePutter);</div><div class="line">    assertEquals(<span class="string">"done"</span>, doer.doTheThing(<span class="number">5</span>));</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="Replace-bindings-for-functional-integration-end-to-end-testing"><a href="#Replace-bindings-for-functional-integration-end-to-end-testing" class="headerlink" title="Replace bindings for functional/integration/end-to-end testing"></a>Replace bindings for functional/integration/end-to-end testing</h3><p>功能测试/综合测试/端对端测试一般使用生产环境的应用，但使用<a href="">fakes</a>替换persistence，后端和验证系统，让其他部分正常运行。这种方式适用于一个或少量有限数量的测试配置替换产品配置中的一些绑定。</p>
<h4 id="Option-1-Override-bindings-by-subclassing-modules-don’t-do-this"><a href="#Option-1-Override-bindings-by-subclassing-modules-don’t-do-this" class="headerlink" title="Option 1: Override bindings by subclassing modules (don’t do this!)"></a>Option 1: Override bindings by subclassing modules (don’t do this!)</h4><p>最简单的方法是通过子类重写module的@Provides方法来替换待测component中的绑定。（看<a href="#do-not-override">下面</a>会出现的问题）.</p>
<p>当创建Dagger component的实例时，你传入需要的module实例。你可以这些module子类实例，这些子类可以重写module中的@Provides方法来替换一些绑定。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(modules = &#123;AuthModule.class, <span class="comment">/* … */</span>&#125;)</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyApplicationComponent</span> </span>&#123; <span class="comment">/* … */</span> &#125;</div><div class="line"></div><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthModule</span> </span>&#123;</div><div class="line">  <span class="meta">@Provides</span> <span class="function">AuthManager <span class="title">authManager</span><span class="params">(AuthManagerImpl impl)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> impl;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FakeAuthModule</span> <span class="keyword">extends</span> <span class="title">AuthModule</span> </span>&#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function">AuthManager <span class="title">authManager</span><span class="params">(AuthManagerImpl impl)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FakeAuthManager();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">MyApplicationComponent testingComponent = DaggerMyApplicationComponent.builder()</div><div class="line">    .authModule(<span class="keyword">new</span> FakeAuthModule())</div><div class="line">    .build();</div></pre></td></tr></table></figure></p>
<p><span id="do-not-override">但这种方法也有一些局限性</span>：</p>
<ul>
<li>不能改变绑定图的静态图形：不能添加或移除绑定或改变绑定的依赖。具体讲：<ul>
<li>重写@Provides方法不能改变其参数类型，缩小返回类型的范围也不会对绑定图造成影响。上面的例子中，testingComponent扔需要为AuthManagerImpl绑定以及其他的依赖，即使它们没有被用到。</li>
<li>同样地，重写的module不能添加绑定到对象图，包括<a href="#multibindings">multibinding</a>(但你仍可以重写一个SET_VALUES方法来返回一个不同的set)。任何子类中新的@Provides方法都会被Dagger忽略。这意味着虚拟的对象几乎不能使用到依赖注入的优势。</li>
</ul>
</li>
<li>这种方式复写的@Provides方法不能是静态的，所以不能<a href="https://github.com/google/dagger/commit/9b81e1091d5e9ddd1e84318fbab863a8c62fb757" target="_blank" rel="external">省略</a>它们的实例。</li>
</ul>
<h4 id="Option-2-Separate-component-configurations"><a href="#Option-2-Separate-component-configurations" class="headerlink" title="Option 2: Separate component configurations"></a><span id="separate-component-configurations">Option 2: Separate component configurations</span></h4><p>另一个方法需要对module进行更多的前期设计。应用的每个配置（生产和测试）使用不同的component配置。这个测试component类型继承了生产环境component并配置了不同的modules.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span>(modules = &#123;</div><div class="line">  OAuthModule.class, <span class="comment">// real auth</span></div><div class="line">  FooServiceModule.class, <span class="comment">// real backend</span></div><div class="line">  OtherApplicationModule.class,</div><div class="line">  <span class="comment">/* … */</span> &#125;)</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ProductionComponent</span> </span>&#123;</div><div class="line">  <span class="function">Server <span class="title">server</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Component</span>(modules = &#123;</div><div class="line">  FakeAuthModule.class, <span class="comment">// fake auth</span></div><div class="line">  FakeFooServiceModule.class, <span class="comment">// fake backend</span></div><div class="line">  OtherApplicationModule.class,</div><div class="line">  <span class="comment">/* … */</span>&#125;)</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TestComponent</span> <span class="keyword">extends</span> <span class="title">ProductionComponent</span> </span>&#123;</div><div class="line">  <span class="function">FakeAuthManager <span class="title">fakeAuthManager</span><span class="params">()</span></span>;</div><div class="line">  <span class="function">FakeFooService <span class="title">fakeFooService</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在测试调用的主方法是DaggerTestComponent.builder()而不是DaggerProductionComponent.builder().注意此test component接口可以添加虚拟实例（fakeAuthManager()和fakeFooService()）句柄这样需要的时候就可以拿到它们控制线束。    </p>
<p>但你会怎样设计你的modules让这个模式更简单呢？</p>
<h3 id="Organize-modules-for-testability"><a href="#Organize-modules-for-testability" class="headerlink" title="Organize modules for testability"></a>Organize modules for testability</h3><p>Module类是一种<a href="https://en.wikipedia.org/wiki/Utility_class" target="_blank" rel="external">工具类</a>：是包含很多@Provides方法的集合，每个@Provides方法都可以作为一个注入器提供指定类型实例。</p>
<p>(一个@Provides方法依赖另一个提供的类型会使几个@Provides方法产生联系，但通常它们不会明确地调用对方或依赖同一可变状态。多个@Provides方法指向同一实例字段，这样它们就不再是独立的了。这里的建议是将@Provides方法视为工具方法这样测试时更易替换module)。</p>
<p>那么怎么决定哪些@Provides方法应该放在一个module中呢？</p>
<p>一种方式是将bindings分为published bindings和internal bindings，然后再决定那些published bindings有合适的选择。</p>
<p><strong>Published</strong> bindings（公有绑定）    是这些向应用的其他部分提供功能的绑定。如AuthManager 或 User 或 DocDatabase 都是 published：他们都绑定在一个module中这样应用其他部分就可以使用他们。</p>
<p>剩下的绑定就是<strong>Internal</strong>（私有绑定） bindings：这类绑定在一些published 类型的实现中作为一部分被使用。例如：OAuth client ID或OAuthKeyStore的配置绑定只会被OAuth的实现AuthManager使用，不会被应用的其他部分使用。这些绑定通常是package-private的或被package-private修饰。</p>
<p>一些published 绑定会有替代选择，特别是测试时，其他的就没有。例如：AuthManager就有可选绑定：一个测试用，其他适用于不同的授权/验证协议。</p>
<p>但另一方面，如果AuthManager接口有一个方法返回当前在线用户，你可能想发布一个绑定提供Users，仅通过调用AuthManager的getCurrentUser()即可。这个published绑定就不太可能需要替代了。</p>
<p>一旦你将绑定分为带有替代选择的published绑定、没有替代选择的published绑定和internal绑定，可以这样编排modules:</p>
<ul>
<li>每个带替代选择的published绑定对应一个module。（每一个替代选择也对应一个module。）这个module仅包含一个published绑定，以及所有这个published 绑定需要的internal 绑定。</li>
<li>所有无替代选择的published bindings放入按照功能线组织的module中</li>
<li>公有绑定module应该包含需要公有绑定的没有替代选择的module.</li>
</ul>
<p>为每个module加上文档描述它提供的公有绑定自然是极好的。</p>
<p>这是使用auth domain的例子。如果有一个AuthManager接口，它可能有一个OAuth实现和一个测试用的模拟实现。综上所述，可能有一个你并不像改变配置的关于当前用户的绑定。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Provides auth bindings that will not change in different auth configurations,</div><div class="line"> * such as the current user.</div><div class="line"> */</div><div class="line"><span class="meta">@Module</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthModule</span> </span>&#123;</div><div class="line">  <span class="meta">@Provides</span> <span class="function"><span class="keyword">static</span> User <span class="title">currentUser</span><span class="params">(AuthManager authManager)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> authManager.currentUser();</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// Other bindings that don’t differ among AuthManager implementations.</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/** Provides a &#123;<span class="doctag">@link</span> AuthManager&#125; that uses OAuth. */</span></div><div class="line"><span class="meta">@Module</span>(includes = AuthModule.class) <span class="comment">// Include no-alternative bindings.</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OAuthModule</span> </span>&#123;</div><div class="line">  <span class="meta">@Provides</span> <span class="function"><span class="keyword">static</span> AuthManager <span class="title">authManager</span><span class="params">(OAuthManager authManager)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> authManager;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// Other bindings used only by OAuthManager.</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/** Provides a fake &#123;<span class="doctag">@link</span> AuthManager&#125; for testing. */</span></div><div class="line"><span class="meta">@Module</span>(includes = AuthModule.class) <span class="comment">// Include no-alternative bindings.</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FakeAuthModule</span> </span>&#123;</div><div class="line">  <span class="meta">@Provides</span> <span class="function"><span class="keyword">static</span> AuthManager <span class="title">authManager</span><span class="params">(FakeAuthManager authManager)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> authManager;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// Other bindings used only by FakeAuthManager.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后你的正式环境配置将会使用真正的module，和测试配置使用虚拟module，如<a href="#separate-component-configurations">上</a>所述。  </p>
<h2 id="Project-Pages"><a href="#Project-Pages" class="headerlink" title="Project Pages"></a><span id="project">Project Pages</span></h2><p><a href="https://github.com/google/dagger" target="_blank" rel="external">GitHub</a><br><a href="http://google.github.io/dagger/api/2.0/" target="_blank" rel="external">Release 2.0 API(javadoc)</a><br><a href="http://google.github.io/dagger/api/latest/" target="_blank" rel="external">Developer API(javadoc)</a></p>
<p><strong>因为官方工程是基于maven构建的，为了便于各位Android Coder的学习，我将官方工程中Android的部分拿出来放到<a href="https://github.com/Metal626/Dagger2ForAndroid.git" target="_blank" rel="external">GitHub</a>上了。</strong></p>
<p><span id="bottom"><a href="#top">回到顶部</a></span></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;span id=&quot;top&quot;&gt;目录&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;#home&quot;&gt;Home&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#guide&quot;&gt;User’s Guide&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="依赖注入" scheme="http://yoursite.com/tags/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    
      <category term="dagger2" scheme="http://yoursite.com/tags/dagger2/"/>
    
  </entry>
  
  <entry>
    <title>apk瘦身的几个技巧 - Optimize your app</title>
    <link href="http://yoursite.com/2016/11/29/apk%E7%98%A6%E8%BA%AB/"/>
    <id>http://yoursite.com/2016/11/29/apk瘦身/</id>
    <published>2016-11-29T07:16:16.891Z</published>
    <updated>2016-11-30T02:45:40.330Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用VectorDrawable代替传统的png格式的ico"><a href="#使用VectorDrawable代替传统的png格式的ico" class="headerlink" title="使用VectorDrawable代替传统的png格式的ico"></a>使用VectorDrawable代替传统的png格式的ico</h3><p>Android 5.0开始提供了新的API <a href="https://developer.android.com/reference/android/graphics/drawable/VectorDrawable.html" target="_blank" rel="external">VectorDrawable</a> 可以使用SVG类型的资源，也就是矢量图。</p>
<p>与矢量图相对应的是栅格图，png,jpg等格式的是栅格图，在android中因为要适配不同分辨率的机型，我们需要在不同的资源文件夹下放置不同尺寸的图片资源，因为栅格图形是有固定数量的像素组成，放大会导致图像失真模糊。</p>
<p>现在有了矢量图的支持，我们只需要一套图标资源就OK了，而且更节省空间png格式要好几k，现在只需几百字节。那要怎么做呢？</p>
<ul>
<li><p>添加VectorDrawable兼容包</p>
<pre><code>compile &apos;com.android.support:support-vector-drawable:24.1.0&apos;
</code></pre></li>
<li><p>将UI(UI使用Adobe Illustrator可以制作svg图)给你的svg图转换为VectorDrawable</p>
<p>  <img src="http://ohe81rx2w.bkt.clouddn.com/public/16-11-29/49917257.jpg" alt=""><br>例如上面这个svg格式的icon用文本编辑器打开只这样的：</p>
<pre><code class="xml">&lt;?xml version="1.0" encoding="utf-8"?&gt;
<span class="comment">&lt;!-- Generator: Adobe Illustrator 17.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  --&gt;</span>
<span class="meta">&lt;!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"&gt;</span>
<span class="tag">&lt;<span class="name">svg</span> <span class="attr">version</span>=<span class="string">"1.1"</span> <span class="attr">id</span>=<span class="string">"图层_1"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">xmlns:xlink</span>=<span class="string">"http://www.w3.org/1999/xlink"</span> <span class="attr">x</span>=<span class="string">"0px"</span> <span class="attr">y</span>=<span class="string">"0px"</span>
     <span class="attr">width</span>=<span class="string">"46.051px"</span> <span class="attr">height</span>=<span class="string">"46.051px"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 46.051 46.051"</span> <span class="attr">enable-background</span>=<span class="string">"new 0 0 46.051 46.051"</span> <span class="attr">xml:space</span>=<span class="string">"preserve"</span>&gt;</span>
<span class="tag">&lt;<span class="name">g</span>&gt;</span>
    <span class="tag">&lt;<span class="name">g</span>&gt;</span>
        <span class="tag">&lt;<span class="name">g</span> <span class="attr">id</span>=<span class="string">"XMLID_16_"</span>&gt;</span>
            <span class="tag">&lt;<span class="name">path</span> <span class="attr">fill</span>=<span class="string">"#040000"</span> <span class="attr">d</span>=<span class="string">"M36.219,10.212L21.707,8.94L3.025,27.407l15.799,15.618l18.681-18.467L36.219,10.212z M30.97,17.792
                c-1.235,0-2.264-1.017-2.264-2.238c0-1.221,1.029-2.238,2.264-2.238c1.235,0,2.264,1.017,2.264,2.238
                C33.235,16.825,32.205,17.792,30.97,17.792z"</span>/&gt;</span>
        <span class="tag">&lt;/<span class="name">g</span>&gt;</span>
        <span class="tag">&lt;<span class="name">g</span> <span class="attr">id</span>=<span class="string">"XMLID_15_"</span>&gt;</span>
            <span class="tag">&lt;<span class="name">path</span> <span class="attr">fill</span>=<span class="string">"#040000"</span> <span class="attr">d</span>=<span class="string">"M35.653,17.601c-1.662,0-3.207-0.516-4.47-1.492l0.396-0.501c1.148,0.887,2.557,1.357,4.073,1.357
                c3.71,0,6.729-2.984,6.729-6.652c0-3.668-3.019-6.652-6.729-6.652c-3.294,0-6.083,2.285-6.631,5.434l-0.634-0.108
                c0.601-3.455,3.656-5.962,7.265-5.962c4.065,0,7.372,3.269,7.372,7.288S39.718,17.601,35.653,17.601z"</span>/&gt;</span>
        <span class="tag">&lt;/<span class="name">g</span>&gt;</span>
    <span class="tag">&lt;/<span class="name">g</span>&gt;</span>
<span class="tag">&lt;/<span class="name">g</span>&gt;</span>
<span class="tag">&lt;/<span class="name">svg</span>&gt;</span>
</code></pre>
</li>
</ul>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;转换称VectorDrawable后是什么样呢？</p>
<pre><code class="xml">    <span class="tag">&lt;<span class="name">vector</span> <span class="attr">android:height</span>=<span class="string">"20dp"</span> <span class="attr">android:viewportHeight</span>=<span class="string">"48.0"</span>
    <span class="attr">android:viewportWidth</span>=<span class="string">"48.0"</span> <span class="attr">android:width</span>=<span class="string">"20dp"</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span>
    <span class="tag">&lt;<span class="name">path</span> <span class="attr">android:fillColor</span>=<span class="string">"#040000"</span> <span class="attr">android:pathData</span>=<span class="string">"M36.219,10.212L21.707,8.94L3.025,27.407l15.799,15.618l18.681-18.467L36.219,10.212z M30.97,17.792
                c-1.235,0-2.264-1.017-2.264-2.238c0-1.221,1.029-2.238,2.264-2.238c1.235,0,2.264,1.017,2.264,2.238
                C33.235,16.825,32.205,17.792,30.97,17.792z"</span>/&gt;</span>
    <span class="tag">&lt;<span class="name">path</span> <span class="attr">android:fillColor</span>=<span class="string">"#040000"</span> <span class="attr">android:pathData</span>=<span class="string">"M35.653,17.601c-1.662,0-3.207-0.516-4.47-1.492l0.396-0.501c1.148,0.887,2.557,1.357,4.073,1.357
                c3.71,0,6.729-2.984,6.729-6.652c0-3.668-3.019-6.652-6.729-6.652c-3.294,0-6.083,2.285-6.631,5.434l-0.634-0.108
                c0.601-3.455,3.656-5.962,7.265-5.962c4.065,0,7.372,3.269,7.372,7.288S39.718,17.601,35.653,17.601z"</span>/&gt;</span>
<span class="tag">&lt;/<span class="name">vector</span>&gt;</span>
</code></pre>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;svg的path节点与VectorDrawable的path节点，fill属性对应fillColors属性，定义颜色，d属性对应pathData属性，我们只需要在res/drawable目录下创建xml文件，将svg中的对应属性值复制过来即可。<br>height和width属性定义绝对宽高，viewportWidth和viewportHeight属性定义画布大小，path超出画布部分就不显示了。<br>更多详情请移步：<br><a href="https://developer.android.com/training/material/drawables.html" target="_blank" rel="external">https://developer.android.com/training/material/drawables.html</a><br><a href="https://developer.android.com/reference/android/graphics/drawable/VectorDrawable.html" target="_blank" rel="external">https://developer.android.com/reference/android/graphics/drawable/VectorDrawable.html</a><br><a href="https://developer.android.com/reference/android/graphics/drawable/AnimatedVectorDrawable.html" target="_blank" rel="external">https://developer.android.com/reference/android/graphics/drawable/AnimatedVectorDrawable.html</a><br><a href="http://www.w3.org/TR/SVG11/paths.html#PathData" target="_blank" rel="external">http://www.w3.org/TR/SVG11/paths.html#PathData</a></p>
<h3 id="大图使用webp格式"><a href="#大图使用webp格式" class="headerlink" title="大图使用webp格式"></a>大图使用webp格式</h3><p>对于大图，无论是png 还是 jpg格式的，可以将其转换为webp格式的。</p>
<blockquote>
<p>WebP格式，谷歌（google）开发的一种旨在加快图片加载速度的图片格式。图片压缩体积大约只有JPEG的2/3，并能节省大量的服务器带宽资源和数据空间。</p>
</blockquote>
<p>webp可以作为应用图片传输的格式，可以节省服务器的资源，用户流量消耗及客户端缓存空间占用，当然客户端的静态资源使用webp格式，好处是显而易见的，当然解析需要的cpu资源会增加，但相对于当前移动设备的硬件性能过剩，这就不算什么了。</p>
<p>根据我个人的实验，转换格式的压缩率是波动的，最多可缩减70%多，少的可缩减1/3左右，对于一些只有十几k的图就不要转换格式了，反而会增加其大小。</p>
<p>那么怎么转换格式呢？这里给大家一个网站(支持将文件转存到Dropbox和GoogleDrive)。将转换后的webp格式的图片直接放置到项目的mipmap目录中即可，android4.0以上是可以直接使用的，包括在xml中引用,但AndroidStudio好像没法预览。<br><a href="http://image.online-convert.com/convert-to-webp" target="_blank" rel="external">http://image.online-convert.com/convert-to-webp</a></p>
<h3 id="对于其他的一些png图使用tinypng压缩"><a href="#对于其他的一些png图使用tinypng压缩" class="headerlink" title="对于其他的一些png图使用tinypng压缩"></a>对于其他的一些png图使用tinypng压缩</h3><p>这里给大家一个好用的网站：<br><a href="https://tinypng.com/" target="_blank" rel="external">https://tinypng.com/</a></p>
<h3 id="去除冗余依赖"><a href="#去除冗余依赖" class="headerlink" title="去除冗余依赖"></a>去除冗余依赖</h3><p>谨慎引入开源库，因为一不小心就会导致你的app增加好几兆。<br>对于那些app中引入好几个网络框架，或图片加载框架，无力吐槽了，最好将引入的第三方框架进行封装，这样方便以后的迁移。<br>去除冗余的依赖，例如项目中要使用firebase分析，我只需要添加<br>    compile ‘com.google.android.gms:play-services-base:9.4.0’<br>而不是整个:play-services包<br>    compile ‘com.google.android.gms:play-services:9.4.0’</p>
<h3 id="去除第三方sdk冗余so库"><a href="#去除第三方sdk冗余so库" class="headerlink" title="去除第三方sdk冗余so库"></a>去除第三方sdk冗余so库</h3><p>在build.gradle中android节点下添加</p>
<pre><code class="gradle">packagingOptions {
   ***
   <span class="keyword">exclude</span> <span class="string">'lib/x86_64/libucrop.so'</span>
   ***
   }
</code></pre>
<p>去除用不上的so库，对于用到的只需保留arm64-v8a的即可，v8是兼容v7的。         </p>
<h3 id="ShrinkResourcesGradle以及MinifyEnabled"><a href="#ShrinkResourcesGradle以及MinifyEnabled" class="headerlink" title="ShrinkResourcesGradle以及MinifyEnabled"></a>ShrinkResourcesGradle以及MinifyEnabled</h3><p>添加到代码中的库可能包含未使用的资源。在APP的build.gradle文件中启动shrinkResourcesGradle，它能自动替你删除这些资源。</p>
<pre><code class="gradle">android{   
    buildTypes{   
        release{   
            minifyEnabled <span class="keyword">true</span>   
            shrinkResources <span class="keyword">true</span>   
            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>),<span class="string">'proguard-rules.pro'</span>   
       }   
   }   
}
</code></pre>
<p>为了使用shrinkResources，你必须启动代码压缩，将minifyEnabled设置为true。在构建的过程中，首先ProGuard会移除没有使用的代码，接着Gradle会移除没有使用的资源。<br>在Proguard中，是否保留符号表对APP的大小是有显著的影响的，可酌情注释下面这行代码，但是建议尽量保留，它可以用于保留调试信息。</p>
<pre><code>-keepattributes SourceFile,LineNumberTable  
</code></pre><h3 id="微信资源压缩打包"><a href="#微信资源压缩打包" class="headerlink" title="微信资源压缩打包"></a>微信资源压缩打包</h3><p>微信中的资源混淆工具主要为了混淆资源ID长度(例如将res/drawable/welcome.png混淆为r/s/a.png)，同时利用7zip深度压缩，大大减少了安装包体积，同时也增加了逼格，提升了反破解难度。效果非常的好。<br>实现原理请查看：<a href="http://www.iteye.com/topic/1141990" target="_blank" rel="external">http://www.iteye.com/topic/1141990</a><br>使用请查看：<a href="https://github.com/shwenzhang/AndResGuard" target="_blank" rel="external">https://github.com/shwenzhang/AndResGuard</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;使用VectorDrawable代替传统的png格式的ico&quot;&gt;&lt;a href=&quot;#使用VectorDrawable代替传统的png格式的ico&quot; class=&quot;headerlink&quot; title=&quot;使用VectorDrawable代替传统的png格式的ico&quot;&gt;
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="apk瘦身" scheme="http://yoursite.com/tags/apk%E7%98%A6%E8%BA%AB/"/>
    
      <category term="优化" scheme="http://yoursite.com/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Pushwoosh集成-原生系统推送</title>
    <link href="http://yoursite.com/2016/11/29/pushwoosh%E9%9B%86%E6%88%90/"/>
    <id>http://yoursite.com/2016/11/29/pushwoosh集成/</id>
    <published>2016-11-29T07:16:16.879Z</published>
    <updated>2016-11-30T04:35:47.709Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.pushwoosh.com/" target="_blank" rel="external">Pushwoosh</a>是境外的一个提供免费推送服务的公司，Android app当然也是基于Google Cloud Messaging 封装的。</p>
<p>因为<a href="http://docs.pushwoosh.com/docs/fcm-configuration" target="_blank" rel="external">官方文档</a>不太直观，也可能是之前不太了解过国外此类第三方服务的套路，使用过程也遇到了一些小问题，算是采坑了吧！</p>
<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.pushwoosh:pushwoosh:+'</span></div><div class="line"><span class="keyword">compile</span> <span class="string">'com.android.support:support-v4:23.1.1+'</span></div><div class="line"><span class="keyword">compile</span> <span class="string">'com.google.android.gms:play-services-gcm:8.4.0+'</span></div><div class="line"><span class="keyword">compile</span> <span class="string">'com.google.android.gms:play-services-location:8.4.0+'</span></div></pre></td></tr></table></figure>
<p>如果不使用Geozones push的话就不需要添加location依赖了。</p>
<h3 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h3><p>在AndroidManifest.xml中application节点下添加：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">"PW_APPID"</span> <span class="attr">android:value</span>=<span class="string">"XXXXX-XXXXX"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">"PW_PROJECT_ID"</span> <span class="attr">android:value</span>=<span class="string">"A123456789012"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<p>PW_APPID是在Pushwoosh创建应用的ID<br>PW_PROJECT_ID是从Google开发者控制台设置GCM拿来的工程号，<br><strong>notice:</strong> 你需要给这个工程号手动添加前缀“A”。</p>
<h3 id="NotificationFactory"><a href="#NotificationFactory" class="headerlink" title="NotificationFactory"></a>NotificationFactory</h3><p>自定义NotificationFactory继承DefaultNotificationFactory，实现自己的通知样式。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomContentNotificationFactory</span> <span class="keyword">extends</span> <span class="title">DefaultNotificationFactory</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Notification <span class="title">onGenerateNotification</span><span class="params">(PushData pushData)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; Build.VERSION_CODES.HONEYCOMB) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onGenerateNotification(pushData);</div><div class="line">        &#125;</div><div class="line">        NotificationCompat.Builder notificationBuilder = <span class="keyword">new</span> NotificationCompat.Builder(getContext())</div><div class="line">                .setContentTitle(getContentFromHtml(pushData.getHeader()))</div><div class="line">                .setContentText(getContentFromHtml(pushData.getMessage()))</div><div class="line">                .setSmallIcon(R.drawable.ic_notification_small)</div><div class="line">                .setLargeIcon(BitmapFactory.decodeResource(getContext().getResources(), R.mipmap.ic_launcher))</div><div class="line">                .setTicker(getContentFromHtml(pushData.getTicker()))</div><div class="line">                .setWhen(System.currentTimeMillis())</div><div class="line">                .setPriority(Notification.PRIORITY_HIGH);</div><div class="line"></div><div class="line">        <span class="keyword">final</span> Notification notification = notificationBuilder.build();</div><div class="line">        addSound(notification, pushData.getSound());</div><div class="line">        addVibration(notification, pushData.getVibration());</div><div class="line">        addCancel(notification);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> notification;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这一步定义了通知的样式，这样我们收到推送后就会显示自定义的通知样式及数据，但一般我们需要在点击通知后跳转到app指定的页面，这里<strong>大家就不要想着给通知添加PendingIntent了，当然添加7.0的Action是可以的。</strong></p>
<h3 id="PushReceiver"><a href="#PushReceiver" class="headerlink" title="PushReceiver"></a>PushReceiver</h3><ul>
<li>自定义PushReceiver继承BroadcastReceiver，这样收到推送弹出通知，点击通知后就会进入PushReceiver的onReceive(),在这里实现跳转逻辑。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PushReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (intent == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        Bundle bundle = PushManagerImpl.preHandlePush(context, intent);</div><div class="line">        <span class="keyword">if</span> (bundle == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        String type = bundle.getString(Constants.TYPE);</div><div class="line">        String id = bundle.getString(Constants.ID);</div><div class="line">        String sn = bundle.getString(Constants.SN);</div><div class="line">      </div><div class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(type))</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">switch</span> (type) &#123;</div><div class="line">           </div><div class="line">            <span class="keyword">case</span> Constants.PUSH_SCENE:</div><div class="line">                <span class="keyword">if</span> (!TextUtils.isEmpty(id) &amp;&amp; !TextUtils.equals(<span class="string">"0"</span>, id))</div><div class="line">                    intent = SceneActivity.newIntent(context, <span class="keyword">new</span> Scene().setId(Integer.parseInt(id)));</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> Constants.PUSH_ORDER:</div><div class="line">                intent = <span class="keyword">new</span> Intent(context, OrderActivity.class);</div><div class="line">                intent.putExtra(Constants.SN, sn);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> Constants.PUSH_SHOP:</div><div class="line">                intent = <span class="keyword">new</span> Intent(context, IndexActivity.class);</div><div class="line">                intent.putExtra(Constants.FROM_PUSH,<span class="keyword">true</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> Constants.PUSH_CATALOG:</div><div class="line">                intent = defaultIntent(context,<span class="keyword">new</span> Catalog().setId(Integer.parseInt(id)));</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (intent == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        Intent mainIntent = <span class="keyword">new</span> Intent(context, IndexActivity.class);</div><div class="line">        mainIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class="line">        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class="line">        Intent[] intents = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (SystemUtils.isAppAlive(context, Constants.PACKAGE_NAME)) &#123;</div><div class="line">            LogUtils.logd(<span class="string">"the app process is alive"</span>);</div><div class="line">            intents = <span class="keyword">new</span> Intent[]&#123;mainIntent,intent&#125;;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            LogUtils.logd(<span class="string">"the app process is dead"</span>);</div><div class="line">            Intent launchIntent = context.getPackageManager().</div><div class="line">                    getLaunchIntentForPackage(Constants.PACKAGE_NAME);</div><div class="line">            launchIntent.setFlags(</div><div class="line">                    Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);</div><div class="line">            intents = <span class="keyword">new</span> Intent[]&#123;launchIntent, mainIntent, intent&#125;;</div><div class="line">        &#125;</div><div class="line">        context.startActivities(intents);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>注意：</strong><br><code>Bundle bundle = PushManagerImpl.preHandlePush(context, intent);</code><br>这行代码千万别少了，如果直接从 intent.getExtras(); 拿到的bundle对象是没有数据的。<br>如果要从bundle中拿到json格式数据，控制台在发送消息时，在root params中要按照下面格式：</p>
<pre><code>Android root params example : { &quot;my_actions&quot; : [ { &quot;title&quot; : &quot;Pushwoosh&quot;, &quot;url&quot; : &quot;https://www.pushwoosh.com&quot;  } ] }
</code></pre><p>然后通过 <code>String actions = bundle.getString(&quot;my_actions&quot;);</code>拿到数据。</p>
<ul>
<li>别忘了在xml中配置：<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">"your.app.package.NotificationReceiver"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">"PW_NOTIFICATION_RECEIVER"</span> <span class="attr">android:value</span>=<span class="string">"your.app.package.NotificationReceiver"</span>/&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p><em>ps:</em> 如果你没有定义PushReceiver的话，之前的自定义通知点击后默认跳入app主页，无论app进程是否还在，都会走一遍Splash页的。</p>
<h3 id="推送服务注册"><a href="#推送服务注册" class="headerlink" title="推送服务注册"></a>推送服务注册</h3><p>在Application的onCreate()中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> PushManager pushManager = PushManager.getInstance(context);</div><div class="line"></div><div class="line">pushManager.setNotificationFactory(<span class="keyword">new</span> CustomContentNotificationFactory());</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    pushManager.onStartup(context);</div><div class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">    Log.e(<span class="string">"Pushwoosh"</span>, e.getLocalizedMessage());</div><div class="line">&#125;</div><div class="line"><span class="comment">//Register for push!</span></div><div class="line">pushManager.registerForPushNotifications();</div></pre></td></tr></table></figure></p>
<h4 id="ps"><a href="#ps" class="headerlink" title="ps:"></a>ps:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-keep class com.pushwoosh.** &#123; *; &#125;</div><div class="line">-keep class com.arellomobile.** &#123; *; &#125;</div><div class="line">-dontwarn com.pushwoosh.**</div><div class="line">-dontwarn com.arellomobile.**</div></pre></td></tr></table></figure>
<p>That’s all !    </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.pushwoosh.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pushwoosh&lt;/a&gt;是境外的一个提供免费推送服务的公司，Android app当然也是基于Google Cloud Messagin
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="推送" scheme="http://yoursite.com/tags/%E6%8E%A8%E9%80%81/"/>
    
  </entry>
  
  <entry>
    <title>关于AndroidStudio你可能不知道的几个奇巧淫技</title>
    <link href="http://yoursite.com/2016/11/29/as/"/>
    <id>http://yoursite.com/2016/11/29/as/</id>
    <published>2016-11-29T07:16:16.849Z</published>
    <updated>2016-11-29T08:26:58.629Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p><strong>shift + command + a</strong><br>查找动作<br><img src="http://ohe81rx2w.bkt.clouddn.com/public/16-11-29/83418817.jpg" alt=""><br>如上，我们可以快捷的打开java autoimport开关</p>
</li>
<li><p><strong>shift + shift</strong><br>全局查找<br><img src="http://ohe81rx2w.bkt.clouddn.com/public/16-11-29/52204604.jpg" alt=""><br>可以方便的查找资源文件、类等</p>
</li>
<li><p><strong>control + space</strong><br>代码提示<br><img src="http://ohe81rx2w.bkt.clouddn.com/public/16-11-29/59956682.jpg" alt=""><br>这个估计是IDE的最强feature了吧</p>
</li>
<li><p><strong>shift + control + space</strong><br>根据类型提示<br><img src="http://ohe81rx2w.bkt.clouddn.com/public/16-11-29/9493519.jpg" alt=""><br>根据需要的类型提示，这个还是挺实用的</p>
</li>
<li><p><strong>command + d</strong><br>复制一整行</p>
</li>
<li><p><strong>alt + right/left</strong><br>单词为单位移动光标<br><img src="http://ohe81rx2w.bkt.clouddn.com/public/16-11-29/52917980.jpg" alt=""><br>同时按住shift的话就可以在行内灵活选择了</p>
</li>
<li><p><strong>alt + up/down</strong><br>多行选择 扩大/缩小<br><img src="http://ohe81rx2w.bkt.clouddn.com/public/16-11-29/3792444.jpg" alt=""></p>
</li>
<li><p><strong>shift + alt + up/down</strong><br>移动当前行或选中的代码<br><img src="http://ohe81rx2w.bkt.clouddn.com/public/16-11-29/81109010.jpg" alt=""></p>
</li>
<li><p><strong>tab</strong><br>使用tab代替enter可以替换之前的代码<br><img src="http://ohe81rx2w.bkt.clouddn.com/public/16-11-29/13160160.jpg" alt=""></p>
</li>
<li><p><strong>使用模板</strong><br><img src="http://ohe81rx2w.bkt.clouddn.com/public/16-11-29/61434024.jpg" alt=""><br>as提供了很多模板，更多去设置中live templates中查看吧。</p>
</li>
<li><p><strong>自定义模板</strong><br><img src="http://ohe81rx2w.bkt.clouddn.com/public/16-11-29/78218975.jpg" alt=""><br>使用时只要使用缩写就能很方便的生成代码了。</p>
</li>
<li><p><strong>给断点设置表达式</strong><br>左键设置断点，右键唤出菜单<br><img src="http://ohe81rx2w.bkt.clouddn.com/log%20expression.gif" alt=""><br>debug运行后，会在console中打印表达式的值<br><img src="http://ohe81rx2w.bkt.clouddn.com/debug%20template.gif" alt=""></p>
</li>
<li><p><strong>结构化查找</strong><br>按照模板查找代码<br><img src="http://ohe81rx2w.bkt.clouddn.com/search%20structurally.gif" alt=""></p>
</li>
<li><p><strong>结构化检查</strong><br>按照指定模板检查代码，可以指定警告级别<br><img src="http://ohe81rx2w.bkt.clouddn.com/inspection.gif" alt=""></p>
</li>
<li><p><strong>结构化替换</strong><br><img src="http://ohe81rx2w.bkt.clouddn.com/structurally%20replacement.gif" alt=""></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;shift + command + a&lt;/strong&gt;&lt;br&gt;查找动作&lt;br&gt;&lt;img src=&quot;http://ohe81rx2w.bkt.clouddn.com/public/16-11-29/83418817.jpg&quot; alt=&quot;&quot;&gt;
    
    </summary>
    
      <category term="Android Studio" scheme="http://yoursite.com/categories/Android-Studio/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="Android Studio" scheme="http://yoursite.com/tags/Android-Studio/"/>
    
      <category term="效率" scheme="http://yoursite.com/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative环境搭建</title>
    <link href="http://yoursite.com/2016/11/29/React-Native/"/>
    <id>http://yoursite.com/2016/11/29/React-Native/</id>
    <published>2016-11-29T07:16:16.332Z</published>
    <updated>2016-11-29T08:38:03.195Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h4><h5 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h5><p>需要AndroidStudio、node.js、React Native command line tools和Watchman.<br>建议通过<a href="http://brew.sh/" target="_blank" rel="external">Homebrew</a>安装node和watchman. </p>
<pre><code>brew install node
brew install watchman 
</code></pre><p>安装React Native 命令行</p>
<pre><code>npm install -g react-native-cli    
</code></pre><p>如果出现permission error，尝试</p>
<pre><code>sudo npm install -g react-native-cli    
</code></pre><p>下载并安装<a href="https://developer.android.com/studio/install.html" target="_blank" rel="external">AndroidStudio</a><br>可以在项目gradle.properties中添加下面代码加快gradle速度，更多<a href="https://docs.gradle.org/2.9/userguide/gradle_daemon.html" target="_blank" rel="external">Gradle Daemon细节</a>。</p>
<pre><code>org.gradle.parallel=true
org.gradle.daemon=true
</code></pre><p><strong>ps:</strong><br>安装Homebrew</p>
<pre><code>brew install wget
</code></pre><p>更新Homebrew</p>
<pre><code>brew update
</code></pre><h5 id="测试安装"><a href="#测试安装" class="headerlink" title="测试安装"></a>测试安装</h5><p>使用React Native命令行工具生成名叫“AwesomeProject”的工程，然后在工程目录下运行react-native run-android。</p>
<pre><code>react-native init AwesomeProject
cd AwesomeProject
react-native run-android
</code></pre><p>如果一切OK的话，就可以看到app已经运行在模拟器或真机上了。react-native run-android只是运行app的一种方式你也可以直接在AndroidStudio中运行。</p>
<p>开启允许代码实时渲染的 Node 服务器。为了看到你的更改你必须打开震动菜单（摇动你的设备或者按住设备上面的菜单按钮，在模拟器上面按住 F2 或者 Page Up，在 Genymotion 上面按住 ⌘+M），然后点击 Reload JS。</p>
<h5 id="修改应用"><a href="#修改应用" class="headerlink" title="修改应用"></a>修改应用</h5><p>在 Android 上面可以编辑 index.android.js来给你的应用做一些改变，并且按住震动菜单上面的 Reload JS 来看发生的改变。</p>
<h5 id="ps-Android-真机调试"><a href="#ps-Android-真机调试" class="headerlink" title="ps:Android 真机调试"></a>ps:Android 真机调试</h5><p>示例 App 直接部署到真机，红色界面报错，无法连接到 Debug Server。</p>
<p>如果是 5.0 或者以上机型，可通过 adb 反向代理端口，将 Mac 端口反向代理到测试机上。</p>
<pre><code>adb reverse tcp:8081 tcp:8081
</code></pre><p>如果 5.0 以下机器，应用安装到测试机上之后，摇动设备，在弹出菜单中选择 Dev Setting &gt; Debug Server host for device，然后填入 Mac 的 IP 地址（ifconfig 命令可查看本机 IP）。</p>
<h5 id="几种常见错误："><a href="#几种常见错误：" class="headerlink" title="几种常见错误："></a>几种常见错误：</h5><ul>
<li><p>sdk not found<br>需要配置android环境变量</p>
<blockquote>
<p>1.启动Terminal终端工具<br>  2.输入cd ~/ 进入当前用户的home目录  </p>
<ol>
<li>创建：</li>
</ol>
</blockquote>
<pre><code>touch .bash_profile
</code></pre><blockquote>
<p>4.打开并编辑：</p>
</blockquote>
<pre><code>open .bash_profile
</code></pre><blockquote>
<p>5、在文件中写入以下内容：</p>
</blockquote>
<pre><code>export ANDROID_HOME=/Users/qxian/Documents/ALL_DEV_SPACE/TOOLS/ANDROID_DEV_TOOLS/ANDROID_SDK/android-sdk-macosx
export PATH=${PATH}:${ANDROID_HOME}/tools
export PATH=${PATH}:${ANDROID_HOME}/platform-tools
</code></pre><blockquote>
<p>注：上面的目录根据你自己的sdk路径而改变<br>  6、执行如下命令立即生效：</p>
</blockquote>
<pre><code>source .bash_profile 
</code></pre><blockquote>
<p>7、验证：输入adb回车。如果未显示command not found，说明此命令有效，环境便亮设置完成。</p>
</blockquote>
</li>
<li><p>permission denied, open ‘/…/.babel.json’<br>初始化工程时命令前加了sudo所致，可使用chown修复</p>
<pre><code>sudo chown 你的目录/.babel.json
</code></pre></li>
<li>com.android.ddmlib.InstallException: Failed to establish session<br>部署应用到小米手机上出现这个问题，解决办法是：小米手机设置里——-开发者选项———启用MIUI优化关闭<br>-应用安装上了，但白屏。<br>去应用权限管理页面，打开应用的悬浮窗权限。</li>
</ul>
<h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><h5 id="安装依赖-1"><a href="#安装依赖-1" class="headerlink" title="安装依赖"></a>安装依赖</h5><p>需要node.js,React Native command line tools, Watchman, 和 Android Studio.<br>建议通过<a href="https://chocolatey.org/" target="_blank" rel="external">Chocolatey</a>（一个流行的Windows下得包管理器）安装node.js和Python2,以管理员权限打开命令行窗口：</p>
<pre><code>choco install nodejs.install
choco install python2
</code></pre><p>Node包含了npm,可以使用npm安装React Native命令行：</p>
<pre><code>npm install -g react-native-cli    
</code></pre><p>下载并安装<a href="https://developer.android.com/studio/install.html" target="_blank" rel="external">AndroidStudio</a><br>可以在项目gradle.properties中添加下面代码加快gradle速度，更多<a href="https://docs.gradle.org/2.9/userguide/gradle_daemon.html" target="_blank" rel="external">Gradle Daemon细节</a>。</p>
<pre><code>org.gradle.parallel=true
org.gradle.daemon=true
</code></pre><h5 id="测试安装-1"><a href="#测试安装-1" class="headerlink" title="测试安装"></a>测试安装</h5><p>同上<br><strong>ps:</strong></p>
<blockquote>
<p>当运行react-native run-android时packager没有自动运行，这就需要手动启动使用react-native start命令。可用浏览器来访问</p>
</blockquote>
<pre><code>http://localhost:8081/index.android.bundle?platform=android
</code></pre><blockquote>
<p>查看是否启动成功。</p>
<p>ERROR Watcher took too long to load<br>修改这个<a href="https://github.com/facebook/react-native/blob/5fa33f3d07f8595a188f6fe04d6168a6ede1e721/packager/react-packager/src/DependencyResolver/FileWatcher/index.js#L16" target="_blank" rel="external">文件</a>中的超时时间。</p>
</blockquote>
<h5 id="修改应用-1"><a href="#修改应用-1" class="headerlink" title="修改应用"></a>修改应用</h5><p>同上</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Mac&quot;&gt;&lt;a href=&quot;#Mac&quot; class=&quot;headerlink&quot; title=&quot;Mac&quot;&gt;&lt;/a&gt;Mac&lt;/h4&gt;&lt;h5 id=&quot;安装依赖&quot;&gt;&lt;a href=&quot;#安装依赖&quot; class=&quot;headerlink&quot; title=&quot;安装依赖&quot;&gt;&lt;/a&gt;安装依
    
    </summary>
    
      <category term="ReactNative" scheme="http://yoursite.com/categories/ReactNative/"/>
    
    
      <category term="ReactNative" scheme="http://yoursite.com/tags/ReactNative/"/>
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Dagger2详解-从代码分析其原理</title>
    <link href="http://yoursite.com/2016/11/29/dagger2%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2016/11/29/dagger2详解/</id>
    <published>2016-11-29T07:16:16.317Z</published>
    <updated>2016-11-30T02:32:56.605Z</updated>
    
    <content type="html"><![CDATA[<p><em>Dagger2基本概念请移步<a href="http://google.github.io/dagger/" target="_blank" rel="external">官方文档</a>,或者我的<a href="http://www.jianshu.com/p/d8dd55956e74" target="_blank" rel="external">翻译</a></em>。</p>
<p><em>架构方面请关注<a href="https://github.com/Metal626/MVP-Dagger2-Rxjava-Retrofit.git" target="_blank" rel="external">GitHub（MVP+Retrofit+Dagger2+Okhttp）</a>及我的文章<a href="http://www.jianshu.com/p/d727963e90b8" target="_blank" rel="external">Android UI框架快速搭建实践</a></em></p>
<p>Dagger2是Dagger1的分支，由谷歌公司接手开发，目前的版本是2.0。Dagger2解决问题的基本思想是：利用生成和写的代码混合达到看似所有的产生和提供依赖的代码都是手写的样子。</p>
<p>如果我们将Dagger2和1比较，他们两个在很多方面都非常相似，但也有很重要的区别，如下：</p>
<blockquote>
<ol>
<li>再也没有使用反射：图的验证、配置和预先设置都在编译的时候执行。  </li>
<li>容易调试和可跟踪：完全具体地调用提供和创建的堆栈  </li>
<li>更好的性能：谷歌声称他们提高了13%的处理性能  </li>
<li>代码混淆：使用派遣方法，就如同自己写的代码一样</li>
</ol>
</blockquote>
<p>当然所有这些很棒的特点都需要付出一个代价，那就是缺乏灵活性，例如：Dagger2没用反射所以没有动态机制。</p>
<p>所以在<a href="http://www.jianshu.com/p/d727963e90b8" target="_blank" rel="external">Android UI框架快速搭建实践</a>这篇文章中，因为我将Presenter作为泛型成员变量抽取到BaseFragment中了，所以View层的Presenter无法使用Dagger2实现注入。如果要实现Presenter注入，则需要在每个View实现中注入对应的Presenter实例，这样就无法抽取到基类中了。这个在具体实践中，需要你自己权衡。</p>
<p>本文就<a href="https://github.com/Metal626/Dagger2ForAndroid.git" target="_blank" rel="external">GitHub</a>项目，从生成的代码对Dagger2进行分析。</p>
<p>使用Dagger2，在module的gradle中配置：</p>
<pre><code class="gradle">apply plugin: <span class="string">'com.android.application'</span>
apply plugin: <span class="string">'com.neenbedankt.android-apt'</span>

android{
    ...
}
<span class="keyword">buildscript</span> {
    <span class="keyword">repositories</span> {
        jcenter()
    }
    <span class="keyword">dependencies</span> {
        <span class="comment">//添加apt插件</span>
        <span class="keyword">classpath</span> <span class="string">'com.neenbedankt.gradle.plugins:android-apt:1.8'</span>
    }
}
<span class="keyword">dependencies</span> {
    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])
    <span class="keyword">compile</span> <span class="string">'com.google.dagger:dagger:2.4'</span>
    apt <span class="string">'com.google.dagger:dagger-compiler:2.4'</span>
    ...
 }
</code></pre>
<p>使用时，定义好component及module后，build工程，Dagger2编译器就会生成对应代码，然后在需要注入的地方调用生成的component实现，名为Dagger前缀+component名称的类完成绑定。</p>
<p><strong>先看结构图：</strong><br><img src="http://ohe81rx2w.bkt.clouddn.com/dagger2.png" alt=""><br><strong>大概介绍一下基本概念：</strong></p>
<ul>
<li><p>Module：使用@Module注解，封装@Provides方法，@Provides注解方法提供依赖对象。</p>
</li>
<li><p>@Inject：在需要依赖注入的地方使用。Dagger2提供3种方式：</p>
<ul>
<li>构造方法注入：在类的构造方法前面注释@Inject</li>
<li>成员变量注入：在类的成员变量（非私有）前面注释@Inject</li>
<li>函数方法注入：在函数前面注释@Inject</li>
</ul>
</li>
<li>@Peractivity：自定义scope注解，约束依赖对象的生命周期。</li>
<li>@Singleton：api提供的scope注解，保证对象在对象图中唯一。</li>
<li>Component:使用@Component注解的接口，是@Inject和@Module联系的桥梁，子component可以使用@Subcomponent也可以指定@Component的dependency参数。</li>
</ul>
<p><strong>是时候上代码了（Dagger2生成的代码在build/generated/source/apt/目录下）：</strong></p>
<p>DemoApplicationModule的定义：</p>
<pre><code class="java"><span class="meta">@Module</span>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplicationModule</span> </span>{
  <span class="keyword">private</span> <span class="keyword">final</span> Application application;

  <span class="function"><span class="keyword">public</span> <span class="title">DemoApplicationModule</span><span class="params">(Application application)</span> </span>{
    <span class="keyword">this</span>.application = application;
  }

  <span class="comment">/**
   * Expose the application to the graph.
   */</span>
  <span class="meta">@Provides</span> <span class="meta">@Singleton</span> <span class="function">Application <span class="title">application</span><span class="params">()</span> </span>{
    <span class="keyword">return</span> application;
  }

  <span class="meta">@Provides</span> <span class="meta">@Singleton</span> <span class="function">LocationManager <span class="title">provideLocationManager</span><span class="params">()</span> </span>{
    <span class="keyword">return</span> (LocationManager) application.getSystemService(LOCATION_SERVICE);
  }
}
</code></pre>
<p>来看生成的代码：</p>
<pre><code class="java"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplicationModule_ApplicationFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span>&lt;<span class="title">Application</span>&gt; </span>{
  <span class="keyword">private</span> <span class="keyword">final</span> DemoApplicationModule <span class="keyword">module</span>;

  <span class="function"><span class="keyword">public</span> <span class="title">DemoApplicationModule_ApplicationFactory</span><span class="params">(DemoApplicationModule <span class="keyword">module</span>)</span> </span>{
    <span class="keyword">assert</span> <span class="keyword">module</span> != <span class="keyword">null</span>;
    <span class="keyword">this</span>.<span class="keyword">module</span> = <span class="keyword">module</span>;
  }

  <span class="meta">@Override</span>
  <span class="function"><span class="keyword">public</span> Application <span class="title">get</span><span class="params">()</span> </span>{
    <span class="keyword">return</span> Preconditions.checkNotNull(
        <span class="keyword">module</span>.application(), <span class="string">"Cannot return null from a non-@Nullable @Provides method"</span>);
  }

  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Factory&lt;Application&gt; <span class="title">create</span><span class="params">(DemoApplicationModule <span class="keyword">module</span>)</span> </span>{
    <span class="keyword">return</span> <span class="keyword">new</span> DemoApplicationModule_ApplicationFactory(<span class="keyword">module</span>);
  }
}    
----------------
<span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplicationModule_ProvideLocationManagerFactory</span>
    <span class="keyword">implements</span> <span class="title">Factory</span>&lt;<span class="title">LocationManager</span>&gt; </span>{
  <span class="keyword">private</span> <span class="keyword">final</span> DemoApplicationModule <span class="keyword">module</span>;

  <span class="function"><span class="keyword">public</span> <span class="title">DemoApplicationModule_ProvideLocationManagerFactory</span><span class="params">(DemoApplicationModule <span class="keyword">module</span>)</span> </span>{
    <span class="keyword">assert</span> <span class="keyword">module</span> != <span class="keyword">null</span>;
    <span class="keyword">this</span>.<span class="keyword">module</span> = <span class="keyword">module</span>;
  }

  <span class="meta">@Override</span>
  <span class="function"><span class="keyword">public</span> LocationManager <span class="title">get</span><span class="params">()</span> </span>{
    <span class="keyword">return</span> Preconditions.checkNotNull(
        <span class="keyword">module</span>.provideLocationManager(),
        <span class="string">"Cannot return null from a non-@Nullable @Provides method"</span>);
  }

  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Factory&lt;LocationManager&gt; <span class="title">create</span><span class="params">(DemoApplicationModule <span class="keyword">module</span>)</span> </span>{
    <span class="keyword">return</span> <span class="keyword">new</span> DemoApplicationModule_ProvideLocationManagerFactory(<span class="keyword">module</span>);
  }
}
</code></pre>
<p>module中定义的@Provides方法会生成对应的工厂类，实现Factory<t>接口，复写get()方法，get()中实际调用了module的provide方法，那module实例从哪里来的呢，看工厂类的创建方法中，看来这个module对象是需要外部传入的。</t></p>
<p>ApplicationComponent定义：</p>
<pre><code class="java"><span class="meta">@Singleton</span>     
<span class="meta">@Component</span>(modules = DemoApplicationModule.class)
<span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationComponent</span> </span>{
  <span class="comment">// Field injections of any dependencies of the DemoApplication</span>
  <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(DemoApplication application)</span></span>;

  <span class="comment">// Exported for child-components.</span>
  <span class="function">Application <span class="title">application</span><span class="params">()</span></span>;
  <span class="function">LocationManager <span class="title">locationManager</span><span class="params">()</span></span>;
}
</code></pre>
<p>生成的代码：</p>
<pre><code class="java"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DaggerApplicationComponent</span> <span class="keyword">implements</span> <span class="title">ApplicationComponent</span> </span>{
  <span class="keyword">private</span> Provider&lt;LocationManager&gt; provideLocationManagerProvider;

  <span class="keyword">private</span> MembersInjector&lt;DemoApplication&gt; demoApplicationMembersInjector;

  <span class="keyword">private</span> Provider&lt;Application&gt; applicationProvider;

  <span class="function"><span class="keyword">private</span> <span class="title">DaggerApplicationComponent</span><span class="params">(Builder builder)</span> </span>{
    <span class="keyword">assert</span> builder != <span class="keyword">null</span>;
    initialize(builder);
  }

  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title">builder</span><span class="params">()</span> </span>{
    <span class="keyword">return</span> <span class="keyword">new</span> Builder();
  }

  <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)
  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(<span class="keyword">final</span> Builder builder)</span> </span>{

    <span class="keyword">this</span>.provideLocationManagerProvider =
        DoubleCheck.provider(
            DemoApplicationModule_ProvideLocationManagerFactory.create(
                builder.demoApplicationModule));

    <span class="keyword">this</span>.demoApplicationMembersInjector =
        DemoApplication_MembersInjector.create(provideLocationManagerProvider);

    <span class="keyword">this</span>.applicationProvider =
        DoubleCheck.provider(
            DemoApplicationModule_ApplicationFactory.create(builder.demoApplicationModule));
  }

  <span class="meta">@Override</span>
  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(DemoApplication application)</span> </span>{
    demoApplicationMembersInjector.injectMembers(application);
  }

  <span class="meta">@Override</span>
  <span class="function"><span class="keyword">public</span> Application <span class="title">application</span><span class="params">()</span> </span>{
    <span class="keyword">return</span> applicationProvider.get();
  }

  <span class="meta">@Override</span>
  <span class="function"><span class="keyword">public</span> LocationManager <span class="title">locationManager</span><span class="params">()</span> </span>{
    <span class="keyword">return</span> provideLocationManagerProvider.get();
  }

  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>{
    <span class="keyword">private</span> DemoApplicationModule demoApplicationModule;

    <span class="function"><span class="keyword">private</span> <span class="title">Builder</span><span class="params">()</span> </span>{}

    <span class="function"><span class="keyword">public</span> ApplicationComponent <span class="title">build</span><span class="params">()</span> </span>{
      <span class="keyword">if</span> (demoApplicationModule == <span class="keyword">null</span>) {
        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(
            DemoApplicationModule.class.getCanonicalName() + <span class="string">" must be set"</span>);
      }
      <span class="keyword">return</span> <span class="keyword">new</span> DaggerApplicationComponent(<span class="keyword">this</span>);
    }

    <span class="function"><span class="keyword">public</span> Builder <span class="title">demoApplicationModule</span><span class="params">(DemoApplicationModule demoApplicationModule)</span> </span>{
      <span class="keyword">this</span>.demoApplicationModule = Preconditions.checkNotNull(demoApplicationModule);
      <span class="keyword">return</span> <span class="keyword">this</span>;
    }
  }
}
</code></pre>
<p>DaggerApplicationComponent内部生成了Builder类，通过Builder的build()可以得到DaggerApplicationComponent对象，但必须先传入DemoApplicationModule对象，这是当然的，Component本来就只是一个桥梁而已，别忘了之前定义ApplicationComponent的注解@Component(modules = DemoApplicationModule.class)，这样就好理解了吧。</p>
<p>调用了Builder的build()后，会走DaggerApplicationComponent的构造器方法，这里调用了initialize(builder), initialize(builder)又干了什么呢？这里初始化了待注入的依赖对象locationManager和application，通过之前的工厂类的create()方法得到工厂类对象，工厂类是实现Factory<t>接口的，Factory<t>又是继承Provider<t>的，所以这里相当于拿到的是封装了不同对象的Provider实例， DoubleCheck.provider(provider)又干了什么呢？DoubleCheck也实现了Provider<t>，它的provider(provider)方法实际上返回了本身实例，实际上也是一个Provider<t>,但为什么要这么做呢?看代码：</t></t></t></t></t></p>
<pre><code class="java">
<span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Provider&lt;T&gt; <span class="title">provider</span><span class="params">(Provider&lt;T&gt; delegate)</span> </span>{
...    
    <span class="keyword">return</span> <span class="keyword">new</span> DoubleCheck&lt;T&gt;(delegate);
}

<span class="function"><span class="keyword">private</span> <span class="title">DoubleCheck</span><span class="params">(Provider&lt;T&gt; provider)</span> </span>{
    <span class="keyword">assert</span> provider != <span class="keyword">null</span>;
    <span class="keyword">this</span>.provider = provider;
}

<span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>{
    Object result = instance;
    <span class="keyword">if</span> (result == UNINITIALIZED) {
      <span class="keyword">synchronized</span> (<span class="keyword">this</span>) {
        result = instance;
        <span class="keyword">if</span> (result == UNINITIALIZED) {
          instance = result = provider.get();
           provider = <span class="keyword">null</span>;
        }
      }
    }
    <span class="keyword">return</span> (T) result;
  }
</code></pre>
<p>provider(Provider<t> delegate)调用了构造器方法，构造器中将传入的Provider对象保存起来了，调用get()时会调用保存的provider对象的get()，实际上就是调用工厂方法的get()拿到对象，这样就实现了懒加载，在需要的时候调用get()，这时才会调用工厂方法的get()，因为真正创建对象的细节是封装在工厂类的get()中的，同时，它会将得到的对象缓存起来，这样下次调用就不需要再调用工厂类创建对象了。</t></p>
<p>再看注入的地方：</p>
<pre><code class="java"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>{
  <span class="keyword">private</span> ApplicationComponent applicationComponent;

  <span class="meta">@Inject</span> LocationManager locationManager;    
  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>{
    <span class="keyword">super</span>.onCreate();
    applicationComponent = DaggerApplicationComponent.builder()
        .demoApplicationModule(<span class="keyword">new</span> DemoApplicationModule(<span class="keyword">this</span>))
        .build();
  }

  <span class="function"><span class="keyword">public</span> ApplicationComponent <span class="title">component</span><span class="params">()</span> </span>{
    <span class="keyword">return</span> applicationComponent;
  }
}
</code></pre>
<p>这里需要注入locationMnager，我们再看根据@Inject生成的代码：</p>
<pre><code class="java"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication_MembersInjector</span> <span class="keyword">implements</span> <span class="title">MembersInjector</span>&lt;<span class="title">DemoApplication</span>&gt; </span>{
  <span class="keyword">private</span> <span class="keyword">final</span> Provider&lt;LocationManager&gt; locationManagerProvider;

  <span class="function"><span class="keyword">public</span> <span class="title">DemoApplication_MembersInjector</span><span class="params">(Provider&lt;LocationManager&gt; locationManagerProvider)</span> </span>{
    <span class="keyword">assert</span> locationManagerProvider != <span class="keyword">null</span>;
    <span class="keyword">this</span>.locationManagerProvider = locationManagerProvider;
  }

  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MembersInjector&lt;DemoApplication&gt; <span class="title">create</span><span class="params">(
      Provider&lt;LocationManager&gt; locationManagerProvider)</span> </span>{
    <span class="keyword">return</span> <span class="keyword">new</span> DemoApplication_MembersInjector(locationManagerProvider);
  }

  <span class="meta">@Override</span>
  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">injectMembers</span><span class="params">(DemoApplication instance)</span> </span>{
    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) {
      <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Cannot inject members into a null reference"</span>);
    }
    instance.locationManager = locationManagerProvider.get();
  }

  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">injectLocationManager</span><span class="params">(
      DemoApplication instance, Provider&lt;LocationManager&gt; locationManagerProvider)</span> </span>{
    instance.locationManager = locationManagerProvider.get();
  }
}
</code></pre>
<p>injectMembers(DemoApplication instance)    方法将locationManager对象赋值给DemoApplication对象，DemoApplication和locationManagerProvider从哪里来呢？上面DaggerApplicationComponent的initialize(builder)中实例化了DemoApplication_MembersInjector并传入需要的参数。</p>
<p>DaggerApplicationComponent实现了ApplicationComponent,当然要复写其方法。<br>在DemoApplication中调用DaggerApplicationComponent的inject()方法，然后就会调用DemoApplication_MembersInjector的injectMembers(DemoApplication instance)，就实现了依赖注入。</p>
<p>那DaggerApplicationComponent的其他方法呢？比如locationManager(),application()等呢，这些方法是在定义在ApplicationComponent中的，子component是共享父component中的绑定的，那子component怎么拿到父component中的依赖对象呢？</p>
<pre><code class="java"><span class="keyword">this</span>.locationManagerProvider =
       <span class="keyword">new</span> Factory&lt;LocationManager&gt;() {
         <span class="keyword">private</span> <span class="keyword">final</span> ApplicationComponent applicationComponent = builder.applicationComponent;

         <span class="meta">@Override</span>
         <span class="function"><span class="keyword">public</span> LocationManager <span class="title">get</span><span class="params">()</span> </span>{
           <span class="keyword">return</span> Preconditions.checkNotNull(
               applicationComponent.locationManager(),
               <span class="string">"Cannot return null from a non-@Nullable component method"</span>);
         }
       };
</code></pre>
<p>在DaggerHomeComponent的initialize(final Builder builder)中通过applicationComponent.locationManager，子component就也有locationManager实例了。</p>
<p>Activity的依赖注入分析也是类似的，通过源码，我们可以清晰的跟踪其调用流程。</p>
<p>That’s all!希望能帮到你。    </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;Dagger2基本概念请移步&lt;a href=&quot;http://google.github.io/dagger/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档&lt;/a&gt;,或者我的&lt;a href=&quot;http://www.jianshu.com/p
    
    </summary>
    
      <category term="android" scheme="http://yoursite.com/categories/android/"/>
    
    
      <category term="android" scheme="http://yoursite.com/tags/android/"/>
    
      <category term="Dagger2" scheme="http://yoursite.com/tags/Dagger2/"/>
    
      <category term="依赖注入" scheme="http://yoursite.com/tags/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Windows下使用hexo+github搭建个人博客</title>
    <link href="http://yoursite.com/2016/11/29/hexo+github%E6%89%93%E9%80%A0%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2016/11/29/hexo+github打造个人博客/</id>
    <published>2016-11-29T01:58:05.767Z</published>
    <updated>2016-11-30T05:39:42.387Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h4><ul>
<li><p>下载安装Node.js<br>  前往<a href="https://nodejs.org/en/" target="_blank" rel="external">https://nodejs.org/en/</a>下载并安装Node.js.</p>
</li>
<li><p>下载并安装Git，安装完成后，在命令行窗口输入node -v,如果不能打印当前node版本号即不识别node命令，则请将node的安装目录添加到系统环境变量。<br> 前往<a href="https://git-scm.com/downloads" target="_blank" rel="external">https://git-scm.com/downloads</a>下载对应平台的git安装包，同理测试git –version ，如果不识别命令，请将git安装目录添加至系统环境变量。</p>
</li>
<li><p>安装hexo<br>  在命令行输入 npm install hexo （npm是node的包管理工具，如果此处无法识别npm命令，请检查node的环境变量配置或命令行进入到node的安装目录执行次命令。）</p>
</li>
</ul>
<h4 id="创建及配置博客"><a href="#创建及配置博客" class="headerlink" title="创建及配置博客"></a>创建及配置博客</h4><ul>
<li>初始化<br>  命令行cd 进入到你要放置博客的目录，执行hexo init,此命令会下载相关依赖及配置。</li>
<li><p>生成页面<br>  执行 hexo generate 或 hexo g, 查看当前目录，public 目录存放你的博客文件，包括html、css、js等，而source目录存放我们所要关注的markdown源文件，你可以在此目录创建你的博客页面，使用清爽的markdown语法书写你的个人博客，当然你也可以使用 hexo new page pagename创建新的页面，hexo g命令会将此目录下的markdo文件转换为网站页面。</p>
</li>
<li><p>本地测试<br>  执行hexo server,启动本地服务器，然后在浏览器地址栏输入localhost:4000,即可看到你的博客页，平时我们编辑完博客后可在本地查看，然后再提交到远端（马上会讲到）。</p>
</li>
<li><p>主题配置<br><a href="https://www.zhihu.com/question/24422335" target="_blank" rel="external">知乎问题</a>,下有人列出了很多主题及github star排名，你可以去选择你喜欢的主题并克隆到本地，然后将其放置到你的站点themes目录中，修改config.yml文件theme属性为你想使用的主题即可切换主题，详细设置请参照该主题的文档。</p>
</li>
</ul>
<h4 id="将博客发布到github"><a href="#将博客发布到github" class="headerlink" title="将博客发布到github"></a>将博客发布到github</h4><ul>
<li><p>创建github账号并创建名为your_user_name.github.io的仓库。</p>
</li>
<li><p>建立本地博客与远端仓库的联系<br>  进入你本地博客目录，打开_config.yml文件，将最后修改为：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">    type:</span> git</div><div class="line"><span class="attr">    repo:</span> https://github.com/your_user_name/your_user_name.github.io.git</div><div class="line"><span class="attr">    branch:</span> master</div></pre></td></tr></table></figure>
<p>  注意：deploy等标签后都要有空格。</p>
</li>
<li><p>将博客发布到远端<br>  执行npm install hexo-deployer-git –save<br>  执行hexo clean;hexo g<br>  执行hexo deploy或hexo d，如果不出意外的话，会弹出输入用户名和密码的对话框，成功后控制台会打印Deploy done: git,然后打开浏览器输入<a href="https://your_user_name.github.io，即可打开你的个人博客站点。" target="_blank" rel="external">https://your_user_name.github.io，即可打开你的个人博客站点。</a></p>
<p>  <strong>注意：</strong> Windows用户可能出现错误：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">bash: /dev/tty: No such device or address</div><div class="line">error: failed to execute prompt script (exit code 1)</div><div class="line">fatal: could not read Username for &apos;https://github.com&apos;: Invalid argument</div><div class="line">FATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</div></pre></td></tr></table></figure>
<p>  此时，你需要摒弃cmd命令行和git shell，打开git bash命令行，重新执行上述命令。</p>
<p>  <strong>PS:</strong> </p>
<ul>
<li><p>此种方式在你每次执行hexo d部署代码到远端时，都会弹窗请求输入用户名和密码，如果想免密提交的话，请将config.yml文件中，deploy节点修改为：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">  type:</span> git</div><div class="line"><span class="attr">  repo:</span> git@github.com:your_user_name/your_user_name.github.io.git</div><div class="line"><span class="attr">  branch:</span> master</div></pre></td></tr></table></figure>
<p>此种为ssh的方式，所以当然需要你添加ssh公匙到你的github账户，具体操作请看<a href="https://help.github.com/categories/ssh/" target="_blank" rel="external">Github</a>文档。 </p>
</li>
<li><p>执行hexo d 无反应<br>此时请打开对应目录下的config.yml,查看文件最后deploy节点是否配置正确。</p>
</li>
<li><p>在config.yml文件中，可以配置你的站点的标题、描述、作者、主题及语言等一系列信息。</p>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前期准备&quot;&gt;&lt;a href=&quot;#前期准备&quot; class=&quot;headerlink&quot; title=&quot;前期准备&quot;&gt;&lt;/a&gt;前期准备&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;下载安装Node.js&lt;br&gt;  前往&lt;a href=&quot;https://nodejs.org/en/&quot; t
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="个人博客" scheme="http://yoursite.com/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
